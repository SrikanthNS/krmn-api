{"version":3,"sources":["common/AuthVerify.js","http-common.js","services/auth-header.js","services/client.service.js","slices/message.js","slices/clients.js","services/task.service.js","slices/tasks.js","services/user.service.js","slices/users.js","components/Tasks/TaskForm.js","components/Tasks/AddTask.js","components/Tasks/Task.js","components/Tasks/TasksList.js","common/EventBus.js","components/BoardAdmin.js","components/BoardModerator.js","components/Home.js","services/auth.service.js","slices/auth.js","components/Login.js","components/Profile.js","components/Register.js","components/clients/ClientList.js","components/clients/ClientForm.js","components/clients/AddClient.js","components/clients/Client.js","App.js","store.js","index.js","helpers/history.js"],"names":["AuthVerify","props","history","listen","user","JSON","parse","localStorage","getItem","token","Buffer","from","split","e","parseJwt","accessToken","exp","Date","now","logOut","axios","create","baseURL","process","REACT_APP_API_BASE_URL","headers","authHeader","Authorization","ClientService","getAll","http","get","id","data","post","update","put","remove","delete","removeAll","findByName","name","messageSlice","createSlice","initialState","reducers","setMessage","state","action","message","payload","clearMessage","reducer","actions","createClient","createAsyncThunk","thunkAPI","a","res","response","toString","dispatch","rejectWithValue","retrieveClients","updateClient","deleteClient","deleteAllClients","findClientByName","extraReducers","fulfilled","push","index","findIndex","Task","splice","TaskService","findByDesc","desc","getCurrentUserTasks","createTask","description","minutesSpent","date","completed","clientId","reviewerId","retrieveTasks","retrieveCurrentUserTasks","updateTask","deleteTask","deleteAllTasks","findTasksByTitle","UserService","getPublicContent","getUserBoard","getModeratorBoard","getAdminBoard","retrieveReviewers","retrieveAllUsers","reviewers","users","TaskForm","clients","useSelector","client","useState","taskStatus","updateStatus","initialTaskState","moment","format","task","setTask","loading","setLoading","useDispatch","useEffect","handleInputChange","event","target","value","handleStatus","preventDefault","validationSchema","Yup","shape","required","initialValues","onSubmit","formValues","saveTask","then","className","role","htmlFor","as","map","component","type","onChange","onClick","defaultChecked","username","AddTask","submitted","setSubmitted","taskList","setTaskList","unwrap","catch","console","log","initFetch","useCallback","style","display","flexDirection","eachTask","currentTask","setCurrentTask","match","params","TaskDataService","status","selected","TasksList","searchTitle","setSearchTitle","tasks","currentUser","auth","showUserCol","setShowUserCol","length","roles","includes","placeholder","scope","colSpan","clientName","reviewerName","userName","reviewer","userId","to","window","confirm","eventBus","on","callback","document","addEventListener","detail","dispatchEvent","CustomEvent","removeEventListener","BoardAdmin","content","setContent","error","_content","EventBus","BoardModerator","Home","color","href","authService","register","email","password","login","setItem","stringify","logout","removeItem","AuthService","isLoggedIn","rejected","Login","src","alt","formValue","location","reload","disabled","Profile","Register","successful","setSuccessful","test","val","ClientList","searchName","setSearchName","ClientForm","initialClientState","saveClient","AddClient","clientList","setClientList","eachClient","Client","currentClient","setCurrentClient","App","showAdminBoard","setShowAdminBoard","Fragment","capitalize","exact","path","authReducer","messageReducer","tasksReducer","userReducer","clientReducer","store","configureStore","devTools","ReactDOM","render","basename","getElementById","createBrowserHistory"],"mappings":"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","file":"static/js/main.499bec3b.chunk.js","sourcesContent":["import React from \"react\";\nimport { history } from '../helpers/history';\n\nconst parseJwt = (token) => {\n    try {\n        return JSON.parse(Buffer.from(token.split(\".\")[1], 'base64'));\n    } catch (e) {\n        return null;\n    }\n};\n\nconst AuthVerify = (props) => {\n    history.listen(() => {\n        const user = JSON.parse(localStorage.getItem(\"user\"));\n\n        if (user) {\n            const decodedJwt = parseJwt(user.accessToken);\n\n            if (decodedJwt.exp * 1000 < Date.now()) {\n                props.logOut();\n            }\n        }\n    });\n\n    return <div></div>;\n};\n\nexport default AuthVerify;\n","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:6868/api',\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n});","export default function authHeader() {\n    const user = JSON.parse(localStorage.getItem('user'));\n\n    if (user && user.accessToken) {\n        return { Authorization: 'Bearer ' + user.accessToken };\n    } else {\n        return {};\n    }\n}","import http from \"../http-common\";\nimport authHeader from \"./auth-header\";\n\nconst getAll = () => {\n    return http.get(\"/clients\", { headers: authHeader() });\n};\n\nconst get = id => {\n    return http.get(`/clients/${id}`, { headers: authHeader() });\n};\n\nconst create = data => {\n    return http.post(\"/clients\", data, { headers: authHeader() });\n};\n\nconst update = (id, data) => {\n    return http.put(`/clients/${id}`, data, { headers: authHeader() });\n};\n\n\nconst remove = id => {\n    return http.delete(`/clients/${id}`, { headers: authHeader() });\n};\n\nconst removeAll = () => {\n    return http.delete(`/clients`, { headers: authHeader() });\n};\n\nconst findByName = name => {\n    return http.get(`/clients?name=${name}`, { headers: authHeader() });\n};\n\nconst ClientService = {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByName,\n};\n\nexport default ClientService;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {};\n\nconst messageSlice = createSlice({\n    name: \"message\",\n    initialState,\n    reducers: {\n        setMessage: (state, action) => {\n            return { message: action.payload };\n        },\n        clearMessage: () => {\n            return { message: \"\" };\n        },\n    },\n});\n\n\nconst { reducer, actions } = messageSlice;\n\nexport const { setMessage, clearMessage } = actions\nexport default reducer;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport ClientService from \"../services/client.service\";\nimport { setMessage } from \"./message\";\n\nconst initialState = [];\n\nexport const createClient = createAsyncThunk(\n    \"client/create\",\n    async ({ name }, thunkAPI) => {\n        try {\n            const res = await ClientService.create({ name });\n            return res.data;\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const retrieveClients = createAsyncThunk(\n    \"clients/retrieve\",\n    async () => {\n        const res = await ClientService.getAll();\n        return res.data;\n    }\n);\n\nexport const updateClient = createAsyncThunk(\n    \"clients/update\",\n    async ({ id, data }) => {\n        const res = await ClientService.update(id, data);\n        return res.data;\n    }\n);\n\n\nexport const deleteClient = createAsyncThunk(\n    \"Clients/delete\",\n    async ({ id }) => {\n        await ClientService.remove(id);\n        return { id };\n    }\n);\n\nexport const deleteAllClients = createAsyncThunk(\n    \"Clients/deleteAll\",\n    async () => {\n        const res = await ClientService.removeAll();\n        return res.data;\n    }\n);\n\nexport const findClientByName = createAsyncThunk(\n    \"Clients/findByName\",\n    async ({ name }) => {\n        const res = await ClientService.findByName(name);\n        return res.data;\n    }\n);\n\nconst clientSlice = createSlice({\n    name: \"client\",\n    initialState,\n    extraReducers: {\n        [createClient.fulfilled]: (state, action) => {\n            state.push(action.payload);\n        },\n        [retrieveClients.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n        [updateClient.fulfilled]: (state, action) => {\n            const index = state.findIndex(Task => Task.id === action.payload.id);\n            state[index] = {\n                ...state[index],\n                ...action.payload,\n            };\n        },\n        [deleteClient.fulfilled]: (state, action) => {\n            let index = state.findIndex(({ id }) => id === action.payload.id);\n            state.splice(index, 1);\n        },\n        [deleteAllClients.fulfilled]: (state, action) => {\n            return [];\n        },\n        [findClientByName.fulfilled]: (state, action) => {\n            return [...action.payload];\n        }\n    },\n});\n\nconst { reducer } = clientSlice;\nexport default reducer;","import http from \"../http-common\";\nimport authHeader from \"./auth-header\";\n\nconst getAll = () => {\n    return http.get(\"/tasks\", { headers: authHeader() });\n};\n\nconst getCurrentUserTasks = () => {\n    return http.get(\"/user/tasks\", { headers: authHeader() });\n};\n\nconst get = id => {\n    return http.get(`/tasks/${id}`, { headers: authHeader() });\n};\n\nconst create = data => {\n    return http.post(\"/tasks\", data, { headers: authHeader() });\n};\n\nconst update = (id, data) => {\n    return http.put(`/tasks/${id}`, data, { headers: authHeader() });\n};\n\nconst remove = id => {\n    return http.delete(`/tasks/${id}`, { headers: authHeader() });\n};\n\nconst removeAll = () => {\n    return http.delete(`/tasks`, { headers: authHeader() });\n};\n\nconst findByDesc = desc => {\n    return http.get(`/tasks?description=${desc}`, { headers: authHeader() });\n};\n\nconst TaskService = {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByDesc,\n    getCurrentUserTasks\n};\n\nexport default TaskService;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport TaskService from \"../services/task.service\";\nimport { setMessage } from \"./message\";\n\nconst initialState = [];\n\nexport const createTask = createAsyncThunk(\n    \"task/create\",\n    async ({ description, minutesSpent, date, completed, clientId, reviewerId }, thunkAPI) => {\n        try {\n            const res = await TaskService.create({ description, minutesSpent, date, completed, clientId, reviewerId });\n            return res.data;\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const retrieveTasks = createAsyncThunk(\n    \"tasks/retrieve\",\n    async () => {\n        const res = await TaskService.getAll();\n        return res.data;\n    }\n);\n\nexport const retrieveCurrentUserTasks = createAsyncThunk(\n    \"currentUsertasks/retrieve\",\n    async () => {\n        const res = await TaskService.getAll();\n        return res.data;\n    }\n);\n\nexport const updateTask = createAsyncThunk(\n    \"tasks/update\",\n    async ({ id, data }) => {\n        const res = await TaskService.update(id, data);\n        return res.data;\n    }\n);\n\nexport const deleteTask = createAsyncThunk(\n    \"Tasks/delete\",\n    async ({ id }) => {\n        await TaskService.remove(id);\n        return { id };\n    }\n);\n\nexport const deleteAllTasks = createAsyncThunk(\n    \"Tasks/deleteAll\",\n    async () => {\n        const res = await TaskService.removeAll();\n        return res.data;\n    }\n);\n\nexport const findTasksByTitle = createAsyncThunk(\n    \"Tasks/findByTitle\",\n    async ({ description }) => {\n        const res = await TaskService.findByDesc(description);\n        return res.data;\n    }\n);\n\nconst TaskSlice = createSlice({\n    name: \"Task\",\n    initialState,\n    extraReducers: {\n        [createTask.fulfilled]: (state, action) => {\n            state.push(action.payload);\n        },\n        [retrieveTasks.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n        [retrieveCurrentUserTasks.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n        [updateTask.fulfilled]: (state, action) => {\n            const index = state.findIndex(Task => Task.id === action.payload.id);\n            state[index] = {\n                ...state[index],\n                ...action.payload,\n            };\n        },\n        [deleteTask.fulfilled]: (state, action) => {\n            let index = state.findIndex(({ id }) => id === action.payload.id);\n            state.splice(index, 1);\n        },\n        [deleteAllTasks.fulfilled]: (state, action) => {\n            return [];\n        },\n        [findTasksByTitle.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n    },\n});\n\nconst { reducer } = TaskSlice;\nexport default reducer;","import http from \"../http-common\";\nimport authHeader from \"./auth-header\";\n\n\nconst getPublicContent = () => {\n    return http.get(\"/all\");\n};\n\nconst getUserBoard = () => {\n    return http.get(\"/user\", { headers: authHeader() });\n};\n\nconst getModeratorBoard = () => {\n    return http.get(\"/mod\", { headers: authHeader() });\n};\n\nconst getAdminBoard = () => {\n    return http.get(\"/admin\", { headers: authHeader() });\n};\n\nconst retrieveReviewers = () => {\n    return http.get(\"/reviewer\");\n};\n\nconst retrieveAllUsers = () => {\n    return http.get(\"/userList\", { headers: authHeader() });\n};\n\nconst UserService = {\n    getPublicContent,\n    getUserBoard,\n    getModeratorBoard,\n    getAdminBoard,\n    retrieveReviewers,\n    retrieveAllUsers,\n};\n\nexport default UserService","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport UserService from \"../services/user.service\";\n\nconst initialState = { reviewers: [], users: [] };\n\n\n\nexport const retrieveReviewers = createAsyncThunk(\n    \"users/reviewer\",\n    async () => {\n        const res = await UserService.retrieveReviewers();\n        return res.data;\n    }\n);\n\nexport const retrieveAllUsers = createAsyncThunk(\n    \"users/list\",\n    async () => {\n        const res = await UserService.retrieveAllUsers();\n        return res.data;\n\n    }\n);\n\nconst userSlice = createSlice({\n    name: \"client\",\n    initialState,\n    extraReducers: {\n        [retrieveReviewers.fulfilled]: (state, action) => {\n            state.reviewers = action.payload;\n        },\n        [retrieveAllUsers.fulfilled]: (state, action) => {\n            state.users = action.payload;\n        }\n    },\n});\n\nconst { reducer } = userSlice;\nexport default reducer;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport moment from 'moment';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { clearMessage } from \"../../slices/message\";\n\nexport const TaskForm = (props) => {\n    const clients = useSelector(state => state.client);\n    const { reviewers } = useSelector(state => state.user);\n    const [taskStatus, updateStatus] = useState(false);\n    const todaysDate = moment().format('YYYY-MM-DD');\n    const initialTaskState = {\n        description: \"\",\n        completed: false,\n        date: todaysDate,\n        clientId: \"\",\n        reviewerId: null,\n        minutesSpent: \"\",\n    };\n    const [task, setTask] = useState(initialTaskState);\n    const [loading, setLoading] = useState(false);\n    const { message } = useSelector((state) => state.message);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n\n\n    const saveTask = (formValues) => {\n        const { description, minutesSpent, clientId } = formValues\n        setLoading(true)\n        props.saveTask({ ...task, description, minutesSpent, clientId }).then(() => {\n            setLoading(false);\n        })\n    }\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setTask({ ...task, [name]: value });\n    };\n\n    const handleStatus = (e, value) => {\n        e.preventDefault();\n        updateStatus(value);\n        setTask({ ...task, completed: value });\n    };\n\n    const validationSchema = Yup.object().shape({\n        clientId: Yup.string().required(\"This field is required!\"),\n        description: Yup.string().required(\"This field is required!\"),\n        minutesSpent: Yup.number().required(\"This field is required!\"),\n    });\n    return (\n\n        <Formik\n            initialValues={initialTaskState}\n            validationSchema={validationSchema}\n            onSubmit={saveTask}\n        >\n            <Form>\n                <div>\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"client\">Choose client<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n\n                        <Field as=\"select\" className=\"form-control\" name=\"clientId\" id=\"clientId\">\n                            <option value=\"\">Select Client</option>\n                            {clients.map(e =>\n                                <option key={`client-${e.id}`} value={e.id}>{e.name}</option>\n                            )}\n                        </Field>\n                        <ErrorMessage\n                            name=\"description\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"taskDate\">Date<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <input className=\"form-control\" type=\"date\" value={task.date} id=\"taskDate\" name=\"date\" onChange={handleInputChange} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <Field\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"description\"\n                            name=\"description\"\n                        />\n                        <ErrorMessage\n                            name=\"description\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"minutesSpent\">Time Spent<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <Field type=\"number\" className=\"form-control\" id=\"minutesSpent\"\n                            name=\"minutesSpent\" />\n\n                        <ErrorMessage\n                            name=\"minutesSpent\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Status<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <button\n                            className=\"btn btn-md btn-info mr-2\"\n                            onClick={(e) => handleStatus(e, !taskStatus)}\n                        >\n                            In-progress {!taskStatus && < input type=\"checkbox\" defaultChecked />}\n                        </button>\n                        <button\n                            className=\"btn btn-md mr-2 btn-primary\"\n                            onClick={(e) => handleStatus(e, !taskStatus)}\n                        >\n                            completed {taskStatus && < input type=\"checkbox\" defaultChecked />}\n                        </button>\n                    </div>\n                    {taskStatus && <div className=\"form-group\">\n                        <label htmlFor=\"reviewers\">Reviewer By: <small className=\"text-center text-muted\">\n                            (optional)</small>: </label>\n\n                        <select className=\"form-control\" onChange={handleInputChange} name=\"reviewerId\" id=\"reviewers\">\n                            <option value={null}>Select Reviewer</option>\n                            {reviewers.map(e =>\n                                <option key={`reviewer-${e.id}`} value={e.id}>{e.username}</option>\n                            )}\n                        </select>\n                    </div>}\n\n\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                            {loading && !message && (\n                                <span className=\"spinner-border spinner-border-sm\"></span>\n                            )}\n                            <span>Submit</span>\n                        </button>\n                    </div>\n                </div ></Form></Formik>)\n}","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { retrieveClients } from '../../slices/clients';\nimport { createTask } from \"../../slices/tasks\";\nimport { retrieveReviewers } from '../../slices/users';\n// import AddIcon from '@mui/icons-material/Add';\nimport { TaskForm } from \"./TaskForm\";\n\nconst AddTask = () => {\n    const [submitted, setSubmitted] = useState(false);\n    const [taskList, setTaskList] = useState([]);\n    const dispatch = useDispatch();\n\n    const saveTask = (task) => {\n        const { description, completed, date, minutesSpent, reviewerId, clientId } = task;\n        dispatch(createTask({ description, date, completed, minutesSpent, reviewerId, clientId }))\n            .unwrap()\n            .then(() => {\n                setTaskList([]);\n                setSubmitted(true);\n            })\n            .catch(e => {\n                console.log(\"🚀 ~ file: AddTask.js ~ line 34 ~ saveTask ~ e\", e.message)\n            });\n    };\n\n    const initFetch = useCallback(async () => {\n        dispatch(retrieveClients());\n        dispatch(retrieveReviewers());\n        setTaskList([<TaskForm key=\"task-1\" saveTask={saveTask} />]);\n    }, [dispatch])\n\n    useEffect(() => {\n        initFetch();\n    }, [initFetch])\n\n\n    const newTask = () => {\n        setTaskList([...taskList, <TaskForm key=\"task1\" saveTask={saveTask} />]);\n        setSubmitted(false);\n    };\n\n\n\n    return (\n        <div className=\"submit-form\" >\n            {submitted ? (\n                <div>\n                    <h4>You submitted successfully!</h4>\n                    <button className=\"btn btn-success\" onClick={(clients, reviewers) => newTask()}>\n                        Add\n                    </button>\n                </div>\n            ) :\n                (<div className=\"row\">\n                    {/* <div >\n                        <button className=\"btn btn-success\" onClick={newTask}>\n                            Add <AddIcon />\n                        </button>\n                    </div> */}\n                    <div className=\"col-md-12\" style={{ display: 'flex', flexDirection: 'column' }} >\n                        {taskList.map(eachTask => eachTask)}\n                    </div>\n                </div >)\n            }\n\n        </div >\n\n    );\n};\n\nexport default AddTask;","import React, { useEffect, useState } from \"react\";\nimport moment from 'moment';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TaskDataService from \"../../services/task.service\";\nimport { deleteTask, updateTask } from \"../../slices/tasks\";\n\nconst Task = (props) => {\n    const initialTaskState = {\n        id: null,\n        clientId: null,\n        date: null,\n        description: \"\",\n        minutesSpent: null,\n        completed: false,\n        reviewerId: null\n    };\n\n    const clients = useSelector(state => state.client);\n    const { reviewers } = useSelector(state => state.user);\n    const [currentTask, setCurrentTask] = useState(initialTaskState);\n    const [message, setMessage] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const getTask = id => {\n        TaskDataService.get(id)\n            .then(response => {\n                setCurrentTask(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    useEffect(() => {\n        getTask(props.match.params.id);\n    }, [props.match.params.id]);\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setCurrentTask({ ...currentTask, [name]: value });\n    };\n\n    const updateStatus = status => {\n        const data = {\n            id: currentTask.id,\n            clientId: currentTask.clientId,\n            reviewerId: currentTask.reviewerId,\n            description: currentTask.description,\n            completed: status,\n            minutesSpent: currentTask.minutesSpent,\n            date: currentTask.date\n        };\n\n        dispatch(updateTask({ id: currentTask.id, data }))\n            .unwrap()\n            .then(response => {\n                console.log(response);\n                setCurrentTask({ ...currentTask, completed: status, ...(!status && { reviewerId: null }) });\n                setMessage(\"The status was updated successfully!\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const updateContent = () => {\n        dispatch(updateTask({ id: currentTask.id, data: currentTask }))\n            .unwrap()\n            .then(response => {\n                console.log(response);\n                setMessage(\"The task was updated successfully!\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const removeTask = () => {\n        dispatch(deleteTask({ id: currentTask.id }))\n            .unwrap()\n            .then(() => {\n                props.history.push(\"/tasks\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    return (\n        <div>\n            {currentTask ? (\n                <div className=\"edit-form\">\n                    <h4>Task</h4>\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"client\">Choose client:</label>\n\n                            <select className=\"form-control\" onChange={handleInputChange} name=\"clientId\" id=\"clients\">\n                                <option value=\"\">Select Client</option>\n                                {clients.map(e =>\n                                    <option key={`client-${e.id}`} selected={currentTask.clientId === e.id} value={e.id}>{e.name}</option>\n                                )}\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"taskDate\">Date:</label>\n                            <input className=\"form-control\" type=\"date\" value={moment(currentTask.date).format(('YYYY-MM-DD'))} id=\"taskDate\" name=\"date\" onChange={handleInputChange} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"description\">Description</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"description\"\n                                name=\"description\"\n                                value={currentTask.description}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"minutesSpent\">Time Spent:</label>\n                            <input\n                                type=\"number\"\n                                className=\"form-control\"\n                                id=\"minutesSpent\"\n                                required\n                                value={currentTask.minutesSpent || ''}\n                                onChange={handleInputChange}\n                                name=\"minutesSpent\"\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>\n                                <strong>Status:</strong>\n                            </label>\n                            {currentTask.completed ? \"Completed\" : \"In-progress\"}\n                        </div>\n                        {currentTask.completed && <div className=\"form-group\">\n                            <label htmlFor=\"reviewers\">Reviewer:</label>\n\n                            <select className=\"form-control\" onChange={handleInputChange} name=\"reviewerId\" id=\"reviewers\">\n                                <option value={null}>Select Reviewer</option>\n                                {reviewers.map(e =>\n                                    <option selected={currentTask.reviewerId === e.id} key={`reviewer-${e.id}`} value={e.id}>{e.username}</option>\n                                )}\n                            </select>\n                        </div>}\n                    </form>\n\n                    {currentTask.completed ? (\n                        <button\n                            className=\"btn btn-md btn-primary mr-2\"\n                            onClick={() => updateStatus(false)}\n                        >\n                            In-Progress\n                        </button>\n                    ) : (\n                        <button\n                            className=\"btn btn-md btn-info mr-2\"\n                            onClick={() => updateStatus(true)}\n                        >\n                            Completed\n                        </button>\n                    )}\n\n                    <button className=\"btn btn-md btn-danger mr-2\" onClick={removeTask}>\n                        Delete\n                    </button>\n\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-md mr-2 btn-success\"\n                        onClick={updateContent}\n                    >\n                        Update\n                    </button>\n                    <p>{message}</p>\n                </div>\n            ) : (\n                <div>\n                    <br />\n                    <p>Please click on a Task to view...</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Task;","import moment from 'moment';\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { retrieveClients } from '../../slices/clients';\nimport {\n    deleteAllTasks, deleteTask, findTasksByTitle, retrieveTasks\n} from \"../../slices/tasks\";\nimport { retrieveReviewers, retrieveAllUsers } from '../../slices/users';\n\n\nconst TasksList = () => {\n    const [searchTitle, setSearchTitle] = useState(\"\");\n    const tasks = useSelector(state => state.tasks);\n    const clients = useSelector(state => state.client);\n    const { reviewers, users } = useSelector(state => state.user);\n    const dispatch = useDispatch();\n    const { user: currentUser } = useSelector((state) => state.auth);\n    const [showUserCol, setShowUserCol] = useState(false);\n\n    const onChangeSearchTitle = e => {\n        const searchTitle = e.target.value;\n        setSearchTitle(searchTitle);\n    };\n\n    const initFetch = useCallback(() => {\n        if (!clients.length) {\n            dispatch(retrieveClients());\n        }\n        if (!reviewers.length) {\n            dispatch(retrieveReviewers());\n        }\n        if (!users.length) {\n            dispatch(retrieveAllUsers());\n        }\n        dispatch(retrieveTasks());\n    }, [dispatch])\n\n    useEffect(() => {\n        if (currentUser && currentUser.roles.includes(\"ROLE_ADMIN\")) {\n            setShowUserCol(true);\n        } else {\n            setShowUserCol(false);\n        }\n    }, [currentUser]);\n\n    useEffect(() => {\n        initFetch()\n    }, [initFetch])\n\n    const removeTask = (id) => {\n        if (!window.confirm(\"Are you sure you want to delete the task ?\")) {\n            return\n        }\n        dispatch(deleteTask({ id }))\n            .unwrap()\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const removeAllTasks = () => {\n        if (!window.confirm(\"Are you sure you want to delete all tasks ?\")) {\n            return\n        }\n        dispatch(deleteAllTasks())\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const findByTitle = () => {\n        dispatch(findTasksByTitle({ description: searchTitle }));\n    };\n\n    return (\n        <div className=\" row\">\n            <div className=\"col-md-12\">\n                <div className=\"input-group mb-3\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search by description\"\n                        value={searchTitle}\n                        onChange={onChangeSearchTitle}\n                    />\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type=\"button\"\n                            onClick={findByTitle}\n                        >\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-12 table-responsive-md\">\n                <h4>Task List</h4>\n                {tasks &&\n                    <table className=\"table table-striped\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">\n                                    #\n                                </th>\n                                {showUserCol && <th scope=\"col\">\n                                    User\n                                </th>}\n                                <th scope=\"col\">\n                                    Client\n                                </th>\n                                <th scope=\"col\">\n                                    Desc\n                                </th>\n                                <th scope=\"col\">\n                                    Date\n                                </th>\n                                <th scope=\"col\">\n                                    Time Spent\n                                </th>\n                                <th scope=\"col\">\n                                    Status\n                                </th>\n                                <th scope=\"col\">\n                                    Reviewer\n                                </th>\n                                <th scope=\"col\" colSpan=\"2\">\n                                    Actions\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody >\n                            {tasks.map((task, index) => {\n                                let clientName = \"\";\n                                clients.map(client => {\n                                    if (client.id === task.clientId) {\n                                        clientName = client.name;\n                                    }\n                                    return true\n                                });\n                                let reviewerName = \"\";\n                                let userName = \"\";\n                                reviewers.map(reviewer => {\n                                    if (reviewer.id === task.reviewerId) {\n                                        reviewerName = reviewer.username;\n                                    }\n                                    return true\n                                });\n\n                                showUserCol && users.map(user => {\n                                    if (user.id === task.userId) {\n                                        userName = user.username;\n                                    }\n                                    return true\n                                })\n\n                                return (\n                                    <tr key={`task-row-${index}`} className={\n                                        (task.completed ? \"table-success\" : \"table-warning\")\n                                    }>\n                                        <td>\n                                            {index + 1}\n                                        </td>\n                                        {showUserCol && <td>\n                                            {userName}\n                                        </td>}\n                                        <td>\n                                            {clientName}\n                                        </td>\n                                        <td>\n                                            {task.description}\n                                        </td>\n                                        <td>\n                                            {moment(task.date).format('DD/MM/yyyy')}\n                                        </td>\n                                        <td>\n                                            {task.minutesSpent} mins\n                                        </td>\n                                        <td>\n                                            {task.completed ? \"Completed\" : \"In-Progress\"}\n                                        </td>\n                                        <td>\n                                            {reviewerName}\n                                        </td>\n                                        <td colSpan=\"2\">\n                                            <div style={{ display: 'inline-flex' }}>\n                                                <Link\n                                                    to={\"/tasks/\" + task.id}\n                                                    className=\"btn btn-sm btn-warning mr-2 mt-0\"\n                                                >\n                                                    Edit\n                                                </Link>\n                                                <button className=\"btn btn-sm btn-danger mr-2 mt-0\" onClick={() => removeTask(task.id)}>\n                                                    Delete\n                                                </button>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n\n                }\n            </div >\n            {\n                tasks.length === 0 ?\n\n\n                    <h5 className=\"text-center text-info\">\n                        No Records Found\n                    </h5>\n                    :\n                    <button\n                        className=\"m-3 btn btn-sm btn-danger\"\n                        onClick={removeAllTasks}\n                    >\n                        Remove All\n                    </button>\n\n            }\n        </div >\n    );\n};\n\nexport default TasksList;","const eventBus = {\n    on(event, callback) {\n        document.addEventListener(event, (e) => callback(e.detail));\n    },\n    dispatch(event, data) {\n        document.dispatchEvent(new CustomEvent(event, { detail: data }));\n    },\n    remove(event, callback) {\n        document.removeEventListener(event, callback);\n    },\n};\n\nexport default eventBus;","import React, { useEffect, useState } from \"react\";\nimport EventBus from \"../common/EventBus\";\nimport UserService from \"../services/user.service\";\n\n\nconst BoardAdmin = () => {\n    const [content, setContent] = useState(\"\");\n\n    useEffect(() => {\n        UserService.getAdminBoard().then(\n            (response) => {\n                setContent(response.data);\n            },\n            (error) => {\n                const _content =\n                    (error.response &&\n                        error.response.data &&\n                        error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n\n                setContent(_content);\n                if (error.response && error.response.status === 401) {\n                    EventBus.dispatch(\"logout\");\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{content}</h3>\n            </header>\n        </div>\n    );\n};\n\nexport default BoardAdmin;\n","import React, { useEffect, useState } from \"react\";\nimport EventBus from \"../common/EventBus\";\nimport UserService from \"../services/user.service\";\n\nconst BoardModerator = () => {\n    const [content, setContent] = useState(\"\");\n\n    useEffect(() => {\n        UserService.getModeratorBoard().then(\n            (response) => {\n                setContent(response.data);\n            },\n            (error) => {\n                const _content =\n                    (error.response &&\n                        error.response.data &&\n                        error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n\n                setContent(_content);\n                if (error.response && error.response.status === 401) {\n                    EventBus.dispatch(\"logout\");\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{content}</h3>\n            </header>\n        </div>\n    );\n};\n\nexport default BoardModerator;\n","import React from \"react\";\n// import UserService from \"../services/user.service\";\n\n\nconst Home = () => {\n    // const [content, setContent] = useState(\"\");\n\n    // useEffect(() => {\n    //     UserService.getPublicContent().then(\n    //         (response) => {\n    //             setContent(response.data);\n    //         },\n    //         (error) => {\n    //             const _content =\n    //                 (error.response && error.response.data) ||\n    //                 error.message ||\n    //                 error.toString();\n\n    //             setContent(_content);\n    //         }\n    //     );\n    // }, []);\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-sm-12\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Thought for the Day!</h5>\n                        <p className=\"card-text\">Failures are the stepping stones for <span style={{ color: \"green\" }}>success</span></p>\n                        <button href=\"#\" className=\"btn btn-primary\">Have a nice day</button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-sm-12\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Action Items for December</h5>\n                        <p className=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import http from \"../http-common\";\n\nconst register = (username, email, password) => {\n    return http.post(\"auth/signup\", {\n        username,\n        email,\n        password,\n    });\n};\n\nconst login = (username, password) => {\n    return http\n        .post(\"auth/signin\", {\n            username,\n            password,\n        })\n        .then((response) => {\n            if (response.data.accessToken) {\n                localStorage.setItem(\"user\", JSON.stringify(response.data));\n            }\n\n            return response.data;\n        });\n};\n\nconst logout = () => {\n    localStorage.removeItem(\"user\");\n};\n\n\nconst authService = {\n    register,\n    login,\n    logout,\n};\n\nexport default authService;","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setMessage } from \"./message\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst user = JSON.parse(localStorage.getItem(\"user\"));\n\nexport const register = createAsyncThunk(\n    \"auth/register\",\n    async ({ username, email, password }, thunkAPI) => {\n        try {\n            const response = await AuthService.register(username, email, password);\n            thunkAPI.dispatch(setMessage(response.data.message));\n            return response.data;\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const login = createAsyncThunk(\n    \"auth/login\",\n    async ({ username, password }, thunkAPI) => {\n        try {\n            const data = await AuthService.login(username, password);\n            return { user: data };\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const logout = createAsyncThunk(\"auth/logout\", () => {\n    AuthService.logout();\n});\n\n\nconst initialState = user\n    ? { isLoggedIn: true, user }\n    : { isLoggedIn: false, user: null };\n\nconst authSlice = createSlice({\n    name: \"auth\",\n    initialState,\n    extraReducers: {\n        [register.fulfilled]: (state, action) => {\n            state.isLoggedIn = false;\n        },\n        [register.rejected]: (state, action) => {\n            state.isLoggedIn = false;\n        },\n        [login.fulfilled]: (state, action) => {\n            state.isLoggedIn = true;\n            state.user = action.payload.user;\n        },\n        [login.rejected]: (state, action) => {\n            state.isLoggedIn = false;\n            state.user = null;\n        },\n        [logout.fulfilled]: (state, action) => {\n            state.isLoggedIn = false;\n            state.user = null;\n        },\n    },\n});\n\nconst { reducer } = authSlice;\nexport default reducer;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { login } from \"../slices/auth\";\nimport { clearMessage } from \"../slices/message\";\n\nconst Login = (props) => {\n    const [loading, setLoading] = useState(false);\n\n    const { isLoggedIn } = useSelector((state) => state.auth);\n    const { message } = useSelector((state) => state.message);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n    const initialValues = {\n        username: \"\",\n        password: \"\",\n    };\n\n    const validationSchema = Yup.object().shape({\n        username: Yup.string().required(\"This field is required!\"),\n        password: Yup.string().required(\"This field is required!\"),\n    });\n\n    const handleLogin = (formValue) => {\n        const { username, password } = formValue;\n        setLoading(true);\n\n        dispatch(login({ username, password }))\n            .unwrap()\n            .then(() => {\n                props.history.push(\"/profile\");\n                window.location.reload();\n            })\n            .catch(() => {\n                setLoading(false);\n            });\n    };\n\n    if (isLoggedIn) {\n        return <Redirect to=\"/profile\" />;\n    }\n\n    return (\n        <div className=\"col-md-12 login-form\">\n            <div className=\"card card-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={handleLogin}\n                >\n                    <Form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username</label>\n                            <Field name=\"username\" type=\"text\" className=\"form-control\" />\n                            <ErrorMessage\n                                name=\"username\"\n                                component=\"div\"\n                                className=\"alert alert-danger\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <Field name=\"password\" type=\"password\" className=\"form-control\" />\n                            <ErrorMessage\n                                name=\"password\"\n                                component=\"div\"\n                                className=\"alert alert-danger\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled={loading}>\n                                {loading && (\n                                    <span className=\"spinner-border spinner-border-sm\"></span>\n                                )}\n                                <span>Login</span>\n                            </button>\n                        </div>\n                    </Form>\n                </Formik>\n            </div>\n\n            {message && (\n                <div className=\"form-group\">\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        {message}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\n\nconst Profile = () => {\n    const { user: currentUser } = useSelector((state) => state.auth);\n\n    if (!currentUser) {\n        return <Redirect to=\"/login\" />;\n    }\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>\n                    <strong>{currentUser.username}</strong> Profile\n                </h3>\n            </header>\n            {/* <p>\n                <strong>Token:</strong> {currentUser.accessToken.substring(0, 20)} ...{\" \"}\n                {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\n            </p> */}\n            {/* <p>\n                <strong>Id:</strong> {currentUser.id}\n            </p> */}\n            <p>\n                <strong>Email:</strong> {currentUser.email}\n            </p>\n            <strong>Authorities:</strong>\n            <ul>\n                {currentUser.roles &&\n                    currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\n            </ul>\n        </div>\n    );\n};\n\nexport default Profile;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { register } from \"../slices/auth\";\nimport { clearMessage } from \"../slices/message\";\n\nconst Register = () => {\n    const [successful, setSuccessful] = useState(false);\n\n    const { message } = useSelector((state) => state.message);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n    const initialValues = {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n    };\n\n    const validationSchema = Yup.object().shape({\n        username: Yup.string()\n            .test(\n                \"len\",\n                \"The username must be between 3 and 20 characters.\",\n                (val) =>\n                    val &&\n                    val.toString().length >= 3 &&\n                    val.toString().length <= 20\n            )\n            .required(\"This field is required!\"),\n        email: Yup.string()\n            .email(\"This is not a valid email.\")\n            .required(\"This field is required!\"),\n        password: Yup.string()\n            .test(\n                \"len\",\n                \"The password must be between 6 and 40 characters.\",\n                (val) =>\n                    val &&\n                    val.toString().length >= 6 &&\n                    val.toString().length <= 40\n            )\n            .required(\"This field is required!\"),\n    });\n\n    const handleRegister = (formValue) => {\n        const { username, email, password } = formValue;\n\n        setSuccessful(false);\n\n        dispatch(register({ username, email, password }))\n            .unwrap()\n            .then(() => {\n                setSuccessful(true);\n            })\n            .catch(() => {\n                setSuccessful(false);\n            });\n    };\n\n    return (\n        <div className=\"col-md-12 signup-form\">\n            <div className=\"card card-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={handleRegister}\n                >\n                    <Form>\n                        {!successful && (\n                            <div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"username\">Username</label>\n                                    <Field name=\"username\" type=\"text\" className=\"form-control\" />\n                                    <ErrorMessage\n                                        name=\"username\"\n                                        component=\"div\"\n                                        className=\"alert alert-danger\"\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email</label>\n                                    <Field name=\"email\" type=\"email\" className=\"form-control\" />\n                                    <ErrorMessage\n                                        name=\"email\"\n                                        component=\"div\"\n                                        className=\"alert alert-danger\"\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\">Set Password</label>\n                                    <Field\n                                        name=\"password\"\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                    />\n                                    <ErrorMessage\n                                        name=\"password\"\n                                        component=\"div\"\n                                        className=\"alert alert-danger\"\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <button type=\"submit\" className=\"btn btn-primary btn-block\">Create</button>\n                                </div>\n                            </div>\n                        )}\n                    </Form>\n                </Formik>\n            </div>\n\n            {message && (\n                <div className=\"form-group\">\n                    <div\n                        className={successful ? \"alert alert-success\" : \"alert alert-danger\"}\n                        role=\"alert\"\n                    >\n                        {message}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Register;\n","import moment from 'moment';\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport {\n    deleteAllClients, deleteClient, findClientByName, retrieveClients\n} from \"../../slices/clients\";\n\nconst ClientList = () => {\n    const [searchName, setSearchName] = useState(\"\");\n    const clients = useSelector(state => state.client);\n    const dispatch = useDispatch();\n\n    const onChangeSearchName = e => {\n        const searchName = e.target.value;\n        setSearchName(searchName);\n    };\n\n    const initFetch = useCallback(() => {\n\n        dispatch(retrieveClients());\n    }, [dispatch])\n\n    useEffect(() => {\n        initFetch()\n    }, [initFetch])\n\n    const removeClient = (id) => {\n        if (!window.confirm(\"Are you sure you want to delete the client ?\")) {\n            return\n        }\n        dispatch(deleteClient({ id }))\n            .unwrap()\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const removeAllClients = () => {\n        if (!window.confirm(\"Are you sure you want to delete all clients ?\")) {\n            return\n        }\n        dispatch(deleteAllClients())\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const findByName = () => {\n        dispatch(findClientByName({ name: searchName }));\n    };\n\n    return (\n        <div className=\" row\">\n            <div className=\"col-md-12\">\n                <div className=\"input-group mb-3\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search by description\"\n                        value={searchName}\n                        onChange={onChangeSearchName}\n                    />\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type=\"button\"\n                            onClick={findByName}\n                        >\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </div>\n            {/* client list table start */}\n            <div className=\"col-md-2 table-responsive-md\"></div>\n            <div className=\"col-md-8 table-responsive-md\">\n                <h4>Client List</h4>\n                {clients &&\n                    <table className=\"table table-striped\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">\n                                    #\n                                </th>\n                                <th scope=\"col\">\n                                    Client\n                                </th>\n                                <th scope=\"col\" colSpan=\"2\">\n                                    Actions\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody >\n                            {clients.map((client, index) => {\n                                return (\n                                    <tr key={`client-row-${index}`} >\n                                        <td>\n                                            {index + 1}\n                                        </td>\n                                        <td>\n                                            {client.name}\n                                        </td>\n\n                                        <td colSpan=\"2\">\n                                            <div style={{ display: 'inline-flex' }}>\n                                                <Link\n                                                    to={\"/clients/\" + client.id}\n                                                    className=\"btn btn-sm btn-warning mr-2 mt-0\"\n                                                >\n                                                    Edit\n                                                </Link>\n                                                <button className=\"btn btn-sm btn-danger mr-2 mt-0\" onClick={() => removeClient(client.id)}>\n                                                    Delete\n                                                </button>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n\n                }\n\n\n\n            </div>\n            <div className=\"col-md-2 table-responsive-md\"></div>\n            {/* client list table end */}\n            <div className=\"col-md-12\">\n            </div >\n            {\n                clients.length === 0 ?\n\n\n                    <h5 className=\"text-center text-info\">\n                        No Records Found\n                    </h5>\n                    :\n                    <button\n                        className=\"m-3 btn btn-sm btn-danger\"\n                        onClick={removeAllClients}\n                    >\n                        Remove All\n                    </button>\n\n            }\n        </div >\n\n    );\n};\n\nexport default ClientList;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { clearMessage } from \"../../slices/message\";\n\n\nexport const ClientForm = (props) => {\n    const initialClientState = {\n        name: \"\",\n    };\n    const [client, setClient] = useState(initialClientState);\n    const [loading, setLoading] = useState(false);\n    const { message } = useSelector((state) => state.message);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n    const saveClient = (formValues) => {\n        const { name } = formValues\n        setLoading(true)\n        props.saveClient({ name }).then(() => {\n            setLoading(false);\n        })\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required(\"This field is required!\"),\n    });\n    return (\n\n        <Formik\n            initialValues={initialClientState}\n            validationSchema={validationSchema}\n            onSubmit={saveClient}\n        >\n            <Form>\n                <div>\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Name<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <Field\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"name\"\n                            name=\"name\"\n                        />\n                        <ErrorMessage\n                            name=\"name\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                            {loading && !message && (\n                                <span className=\"spinner-border spinner-border-sm\"></span>\n                            )}\n                            <span>Submit</span>\n                        </button>\n                    </div>\n                </div ></Form></Formik>)\n}","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { createClient } from \"../../slices/clients\";\n// import AddIcon from '@mui/icons-material/Add';\nimport { ClientForm } from \"./ClientForm\";\n\nconst AddClient = () => {\n    const [submitted, setSubmitted] = useState(false);\n    const [clientList, setClientList] = useState([]);\n    const dispatch = useDispatch();\n\n    const saveClient = (client) => {\n        const { name } = client;\n        dispatch(createClient({ name }))\n            .unwrap()\n            .then(() => {\n                setClientList([]);\n                setSubmitted(true);\n            })\n            .catch(e => {\n                console.log(\"🚀 ~ file: AddClient.js ~ line 34 ~ saveClient ~ e\", e.message)\n            });\n    };\n\n    const initFetch = useCallback(async () => {\n        setClientList([<ClientForm key=\"client-1\" saveClient={saveClient} />]);\n    }, [dispatch])\n\n    useEffect(() => {\n        initFetch();\n    }, [initFetch])\n\n\n    const newClient = () => {\n        setClientList([...clientList, <ClientForm key=\"client-1\" saveClient={saveClient} />]);\n        setSubmitted(false);\n    };\n\n\n\n    return (\n        <div className=\"submit-form\" >\n            {submitted ? (\n                <div>\n                    <h4>You submitted successfully!</h4>\n                    <button className=\"btn btn-success\" onClick={() => newClient()}>\n                        Add\n                    </button>\n                </div>\n            ) :\n                (<div className=\"row\">\n                    {/* <div >\n                        <button className=\"btn btn-success\" onClick={newClient}>\n                            Add <AddIcon />\n                        </button>\n                    </div> */}\n                    <div className=\"col-md-12\" style={{ display: 'flex', flexDirection: 'column' }} >\n                        {clientList.map(eachClient => eachClient)}\n                    </div>\n                </div >)\n            }\n\n        </div >\n\n    );\n};\n\nexport default AddClient;","import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ClientService from \"../../services/client.service\";\nimport { deleteClient, updateClient } from \"../../slices/clients\";\n\nconst Client = (props) => {\n    const initialClientState = {\n        id: null,\n        name: \"\",\n\n    };\n    const [currentClient, setCurrentClient] = useState(initialClientState);\n    const [message, setMessage] = useState(\"\");\n    const dispatch = useDispatch();\n\n    const getClient = id => {\n        ClientService.get(id)\n            .then(response => {\n                setCurrentClient(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    useEffect(() => {\n        getClient(props.match.params.id);\n    }, [props.match.params.id]);\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setCurrentClient({ ...currentClient, [name]: value });\n    };\n\n    const updateContent = () => {\n        dispatch(updateClient({ id: currentClient.id, data: currentClient }))\n            .unwrap()\n            .then(response => {\n                console.log(response);\n                setMessage(\"The Client was updated successfully!\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const removeClient = () => {\n        props.history.push(\"/clientList\");\n        window.location.reload();\n        // dispatch(deleteClient({ id: currentClient.id }))\n        //     .unwrap()\n        //     .then(() => {\n        //         props.history.push(\"/clients\");\n        //     })\n        //     .catch(e => {\n        //         console.log(e);\n        //     });\n    };\n\n    return (\n        <div>\n            {currentClient && (\n                <div className=\"edit-form\">\n                    <h4>Client</h4>\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"name\"\n                                name=\"name\"\n                                value={currentClient.name}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                    </form>\n\n                    <button className=\"btn btn-md btn-primary mr-2\" onClick={removeClient}>\n                        Cancel\n                    </button>\n\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-md mr-2 btn-success\"\n                        onClick={updateContent}\n                    >\n                        Update\n                    </button>\n                    <p>{message}</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Client;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport AddTask from \"components/Tasks/AddTask\";\nimport Task from \"components/Tasks/Task\";\nimport TasksList from \"components/Tasks/TasksList\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport EventBus from \"./common/EventBus\";\nimport BoardAdmin from \"./components/BoardAdmin\";\nimport BoardModerator from \"./components/BoardModerator\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Profile from \"./components/Profile\";\nimport Register from \"./components/Register\";\nimport { history } from \"./helpers/history\";\nimport { logout } from \"./slices/auth\";\nimport { clearMessage } from \"./slices/message\";\nimport AuthVerify from \"./common/AuthVerify\";\nimport ClientList from 'components/clients/ClientList';\nimport AddClient from \"components/clients/AddClient\";\nimport Client from 'components/clients/Client';\nimport { capitalize } from 'lodash';\n\nconst App = () => {\n  // const [showModeratorBoard, setShowModeratorBoard] = useState(false);\n  const [showAdminBoard, setShowAdminBoard] = useState(false);\n\n  const { user: currentUser } = useSelector((state) => state.auth);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    history.listen((location) => {\n      dispatch(clearMessage()); // clear message when changing location\n    });\n  }, [dispatch]);\n\n  const logOut = useCallback(() => {\n    dispatch(logout());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (currentUser) {\n      // setShowModeratorBoard(currentUser.roles.includes(\"ROLE_MODERATOR\"));\n      setShowAdminBoard(currentUser.roles.includes(\"ROLE_ADMIN\"));\n    } else {\n      // setShowModeratorBoard(false);\n      setShowAdminBoard(false);\n    }\n\n    EventBus.on(\"logout\", () => {\n      logOut();\n    });\n\n    return () => {\n      EventBus.remove(\"logout\");\n    };\n  }, [currentUser, logOut]);\n\n  return (\n    <Router history={history}>\n      <div>\n        <nav className=\"navbar navbar-expand-lg bg-dark navbar-dark\">\n          <div className=\"container-fluid\">\n            <Link to={\"/\"} className=\"navbar-brand\">\n              KRMN & Associates\n            </Link>\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n\n                {currentUser && (<React.Fragment>\n                  <li className=\"nav-item dropdown\">\n                    <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown1\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                      Tasks\n                    </a>\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown1\">\n                      <li><Link to={\"/taskList\"} className=\"dropdown-item\" href=\"#\">Task List</Link></li>\n                      <li><Link to={\"/addTask\"} className=\"dropdown-item\" href=\"#\">Add Task</Link></li>\n                    </ul>\n                  </li>\n\n                  {showAdminBoard && <React.Fragment>\n                    <li className=\"nav-item dropdown\">\n                      <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown2\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                        Clients\n                      </a>\n                      <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown2\">\n                        <li><Link to={\"/clientList\"} className=\"dropdown-item\" href=\"#\">Client List</Link></li>\n                        <li><Link to={\"/addClient\"} className=\"dropdown-item\" href=\"#\">Add Client</Link></li>\n                      </ul>\n                    </li>\n                    <li className=\"nav-item dropdown\">\n                      <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown2\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                        Staff\n                      </a>\n                      <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown2\">\n                        <li><Link to={\"/register\"} className=\"dropdown-item\" href=\"#\">Add Staff</Link></li>\n                      </ul>\n                    </li>\n                  </React.Fragment>\n                  }\n                </React.Fragment>\n                )}\n              </ul>\n              <ul className=\"navbar-nav mr\">\n                {currentUser ? (\n                  <React.Fragment>\n                    <li className=\"nav-item dropdown\">\n                      <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown2\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                        Hello {capitalize(currentUser.username)}\n                      </a>\n                      <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown2\">\n                        <li><a href=\"/login\" className=\"dropdown-item\" onClick={logOut}>\n                          LogOut\n                        </a></li>\n                      </ul>\n                    </li>\n\n                  </React.Fragment>\n                ) : (\n                  <React.Fragment>\n                    <li className=\"nav-item\">\n                      <Link to={\"/login\"} className=\"nav-link\">\n                        Login\n                      </Link>\n                    </li>\n                  </React.Fragment>\n                )}\n\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/home\"]} component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route path=\"/taskList\" component={TasksList} />\n            <Route path=\"/addTask\" component={AddTask} />\n            <Route path=\"/mod\" component={BoardModerator} />\n            <Route path=\"/admin\" component={BoardAdmin} />\n            <Route path=\"/tasks/:id\" component={Task} />\n            <Route path=\"/clientList\" component={ClientList} />\n            <Route path=\"/addClient\" component={AddClient} />\n            <Route path=\"/clients/:id\" component={Client} />\n          </Switch>\n        </div>\n        <AuthVerify logOut={logOut} />\n      </div >\n    </Router >\n  );\n};\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from \"./slices/auth\";\nimport messageReducer from \"./slices/message\";\nimport tasksReducer from './slices/tasks';\nimport userReducer from './slices/users';\nimport clientReducer from './slices/clients';\n\nconst reducer = {\n    auth: authReducer,\n    message: messageReducer,\n    tasks: tasksReducer,\n    user: userReducer,\n    client: clientReducer,\n}\n\nconst store = configureStore({\n    reducer: reducer,\n    devTools: true,\n})\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport { HashRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter basename=\"/#\">\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();"],"sourceRoot":""}