{"version":3,"sources":["common/AuthVerify.js","http-common.js","services/auth-header.js","services/client.service.js","slices/message.js","slices/clients.js","services/task.service.js","slices/tasks.js","services/user.service.js","slices/users.js","components/Tasks/TaskForm.js","components/Tasks/AddTask.js","components/Tasks/Task.js","components/Tasks/TasksList.js","common/EventBus.js","components/BoardAdmin.js","components/BoardModerator.js","components/Home.js","services/auth.service.js","slices/auth.js","components/Login.js","components/Profile.js","components/Register.js","components/clients/ClientList.js","components/clients/ClientForm.js","components/clients/AddClient.js","components/clients/Client.js","App.js","store.js","index.js","helpers/history.js"],"names":["AuthVerify","props","history","listen","user","JSON","parse","localStorage","getItem","token","Buffer","from","split","e","parseJwt","accessToken","exp","Date","now","logOut","axios","create","baseURL","headers","authHeader","Authorization","ClientService","getAll","http","get","id","data","post","update","put","remove","delete","removeAll","findByName","name","messageSlice","createSlice","initialState","reducers","setMessage","state","action","message","payload","clearMessage","reducer","actions","createClient","createAsyncThunk","thunkAPI","a","res","response","toString","dispatch","rejectWithValue","retrieveClients","updateClient","deleteClient","deleteAllClients","findClientByName","extraReducers","fulfilled","push","index","findIndex","Task","splice","TaskService","findByDesc","desc","getCurrentUserTasks","createTask","description","minutesSpent","date","completed","clientId","reviewerId","taskType","retrieveTasks","retrieveCurrentUserTasks","updateTask","deleteTask","deleteAllTasks","findTasksByTitle","UserService","getPublicContent","getUserBoard","getModeratorBoard","getAdminBoard","retrieveReviewers","retrieveAllUsers","reviewers","users","TaskForm","clients","useSelector","client","useState","taskStatus","updateStatus","initialTaskState","moment","format","task","setTask","loading","setLoading","useDispatch","useEffect","handleInputChange","event","target","value","handleStatus","preventDefault","validationSchema","Yup","shape","required","initialValues","onSubmit","formValues","saveTask","then","className","role","htmlFor","as","map","component","type","onChange","onClick","defaultChecked","username","AddTask","submitted","setSubmitted","taskList","setTaskList","unwrap","catch","console","log","initFetch","useCallback","style","display","flexDirection","eachTask","currentTask","setCurrentTask","match","params","TaskDataService","undefined","status","selected","TasksList","searchTitle","setSearchTitle","tasks","currentUser","auth","showUserCol","setShowUserCol","roles","includes","findByTitle","placeholder","onKeyPress","code","scope","colSpan","clientName","reviewerName","userName","reviewer","userId","to","window","confirm","length","eventBus","on","callback","document","addEventListener","detail","dispatchEvent","CustomEvent","removeEventListener","BoardAdmin","content","setContent","error","_content","EventBus","BoardModerator","Home","color","href","authService","register","email","password","login","setItem","stringify","logout","removeItem","AuthService","isLoggedIn","rejected","Login","src","alt","formValue","location","reload","disabled","Profile","Register","successful","setSuccessful","test","val","ClientList","searchName","setSearchName","ClientForm","saveClient","AddClient","clientList","setClientList","eachClient","Client","currentClient","setCurrentClient","App","showAdminBoard","setShowAdminBoard","Fragment","capitalize","exact","path","authReducer","messageReducer","tasksReducer","userReducer","clientReducer","store","configureStore","devTools","ReactDOM","render","basename","getElementById","createBrowserHistory"],"mappings":"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","file":"static/js/main.fab83a98.chunk.js","sourcesContent":["import React from \"react\";\nimport { history } from '../helpers/history';\n\nconst parseJwt = (token) => {\n    try {\n        return JSON.parse(Buffer.from(token.split(\".\")[1], 'base64'));\n    } catch (e) {\n        return null;\n    }\n};\n\nconst AuthVerify = (props) => {\n    history.listen(() => {\n        const user = JSON.parse(localStorage.getItem(\"user\"));\n\n        if (user) {\n            const decodedJwt = parseJwt(user.accessToken);\n\n            if (decodedJwt.exp * 1000 < Date.now()) {\n                props.logOut();\n            }\n        }\n    });\n\n    return <div></div>;\n};\n\nexport default AuthVerify;\n","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: '/api',\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n});","export default function authHeader() {\n    const user = JSON.parse(localStorage.getItem('user'));\n\n    if (user && user.accessToken) {\n        return { Authorization: 'Bearer ' + user.accessToken };\n    } else {\n        return {};\n    }\n}","import http from \"../http-common\";\nimport authHeader from \"./auth-header\";\n\nconst getAll = () => {\n    return http.get(\"/clients\", { headers: authHeader() });\n};\n\nconst get = id => {\n    return http.get(`/clients/${id}`, { headers: authHeader() });\n};\n\nconst create = data => {\n    return http.post(\"/clients\", data, { headers: authHeader() });\n};\n\nconst update = (id, data) => {\n    return http.put(`/clients/${id}`, data, { headers: authHeader() });\n};\n\n\nconst remove = id => {\n    return http.delete(`/clients/${id}`, { headers: authHeader() });\n};\n\nconst removeAll = () => {\n    return http.delete(`/clients`, { headers: authHeader() });\n};\n\nconst findByName = name => {\n    return http.get(`/clients?name=${name}`, { headers: authHeader() });\n};\n\nconst ClientService = {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByName,\n};\n\nexport default ClientService;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {};\n\nconst messageSlice = createSlice({\n    name: \"message\",\n    initialState,\n    reducers: {\n        setMessage: (state, action) => {\n            return { message: action.payload };\n        },\n        clearMessage: () => {\n            return { message: \"\" };\n        },\n    },\n});\n\n\nconst { reducer, actions } = messageSlice;\n\nexport const { setMessage, clearMessage } = actions\nexport default reducer;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport ClientService from \"../services/client.service\";\nimport { setMessage } from \"./message\";\n\nconst initialState = [];\n\nexport const createClient = createAsyncThunk(\n    \"client/create\",\n    async ({ name }, thunkAPI) => {\n        try {\n            const res = await ClientService.create({ name });\n            return res.data;\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const retrieveClients = createAsyncThunk(\n    \"clients/retrieve\",\n    async () => {\n        const res = await ClientService.getAll();\n        return res.data;\n    }\n);\n\nexport const updateClient = createAsyncThunk(\n    \"clients/update\",\n    async ({ id, data }) => {\n        const res = await ClientService.update(id, data);\n        return res.data;\n    }\n);\n\n\nexport const deleteClient = createAsyncThunk(\n    \"Clients/delete\",\n    async ({ id }) => {\n        await ClientService.remove(id);\n        return { id };\n    }\n);\n\nexport const deleteAllClients = createAsyncThunk(\n    \"Clients/deleteAll\",\n    async () => {\n        const res = await ClientService.removeAll();\n        return res.data;\n    }\n);\n\nexport const findClientByName = createAsyncThunk(\n    \"Clients/findByName\",\n    async ({ name }) => {\n        const res = await ClientService.findByName(name);\n        return res.data;\n    }\n);\n\nconst clientSlice = createSlice({\n    name: \"client\",\n    initialState,\n    extraReducers: {\n        [createClient.fulfilled]: (state, action) => {\n            state.push(action.payload);\n        },\n        [retrieveClients.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n        [updateClient.fulfilled]: (state, action) => {\n            const index = state.findIndex(Task => Task.id === action.payload.id);\n            state[index] = {\n                ...state[index],\n                ...action.payload,\n            };\n        },\n        [deleteClient.fulfilled]: (state, action) => {\n            let index = state.findIndex(({ id }) => id === action.payload.id);\n            state.splice(index, 1);\n        },\n        [deleteAllClients.fulfilled]: (state, action) => {\n            return [];\n        },\n        [findClientByName.fulfilled]: (state, action) => {\n            return [...action.payload];\n        }\n    },\n});\n\nconst { reducer } = clientSlice;\nexport default reducer;","import http from \"../http-common\";\nimport authHeader from \"./auth-header\";\n\nconst getAll = () => {\n    return http.get(\"/tasks\", { headers: authHeader() });\n};\n\nconst getCurrentUserTasks = () => http.get(\"/user/tasks\", { headers: authHeader() });\n\nconst get = id => http.get(`/tasks/${id}`, { headers: authHeader() });\n\n\nconst create = data => http.post(\"/tasks\", data, { headers: authHeader() });\n\nconst update = (id, data) =>\n    http.put(`/tasks/${id}`, data, { headers: authHeader() });\n\n\nconst remove = id =>\n    http.delete(`/tasks/${id}`, { headers: authHeader() });\n\n\nconst removeAll = () =>\n    http.delete(`/tasks`, { headers: authHeader() });\n\n\nconst findByDesc = desc =>\n    http.get(`/tasks?description=${desc}`, { headers: authHeader() });\n\n\nconst TaskService = {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByDesc,\n    getCurrentUserTasks\n};\n\nexport default TaskService;","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport TaskService from \"../services/task.service\";\nimport { setMessage } from \"./message\";\n\nconst initialState = [];\n\nexport const createTask = createAsyncThunk(\n    \"task/create\",\n    async ({ description, minutesSpent, date, completed, clientId, reviewerId, taskType }, thunkAPI) => {\n        try {\n            const res = await TaskService.create({ description, minutesSpent, date, completed, clientId, reviewerId, taskType });\n            return res.data;\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const retrieveTasks = createAsyncThunk(\n    \"tasks/retrieve\",\n    async () => {\n        const res = await TaskService.getAll();\n        return res.data;\n    }\n);\n\nexport const retrieveCurrentUserTasks = createAsyncThunk(\n    \"currentUsertasks/retrieve\",\n    async () => {\n        const res = await TaskService.getAll();\n        return res.data;\n    }\n);\n\nexport const updateTask = createAsyncThunk(\n    \"tasks/update\",\n    async ({ id, data }) => {\n        const res = await TaskService.update(id, data);\n        return res.data;\n    }\n);\n\nexport const deleteTask = createAsyncThunk(\n    \"Tasks/delete\",\n    async ({ id }) => {\n        await TaskService.remove(id);\n        return { id };\n    }\n);\n\nexport const deleteAllTasks = createAsyncThunk(\n    \"Tasks/deleteAll\",\n    async () => {\n        const res = await TaskService.removeAll();\n        return res.data;\n    }\n);\n\nexport const findTasksByTitle = createAsyncThunk(\n    \"Tasks/findByTitle\",\n    async ({ description }) => {\n        const res = await TaskService.findByDesc(description);\n        return res.data;\n    }\n);\n\nconst TaskSlice = createSlice({\n    name: \"Task\",\n    initialState,\n    extraReducers: {\n        [createTask.fulfilled]: (state, action) => {\n            state.push(action.payload);\n        },\n        [retrieveTasks.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n        [retrieveCurrentUserTasks.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n        [updateTask.fulfilled]: (state, action) => {\n            const index = state.findIndex(Task => Task.id === action.payload.id);\n            state[index] = {\n                ...state[index],\n                ...action.payload,\n            };\n        },\n        [deleteTask.fulfilled]: (state, action) => {\n            let index = state.findIndex(({ id }) => id === action.payload.id);\n            state.splice(index, 1);\n        },\n        [deleteAllTasks.fulfilled]: (state, action) => {\n            return [];\n        },\n        [findTasksByTitle.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n    },\n});\n\nconst { reducer } = TaskSlice;\nexport default reducer;","import http from \"../http-common\";\nimport authHeader from \"./auth-header\";\n\n\nconst getPublicContent = () => {\n    return http.get(\"/all\");\n};\n\nconst getUserBoard = () => {\n    return http.get(\"/user\", { headers: authHeader() });\n};\n\nconst getModeratorBoard = () => {\n    return http.get(\"/mod\", { headers: authHeader() });\n};\n\nconst getAdminBoard = () => {\n    return http.get(\"/admin\", { headers: authHeader() });\n};\n\nconst retrieveReviewers = () => {\n    return http.get(\"/reviewer\");\n};\n\nconst retrieveAllUsers = () => {\n    return http.get(\"/userList\", { headers: authHeader() });\n};\n\nconst UserService = {\n    getPublicContent,\n    getUserBoard,\n    getModeratorBoard,\n    getAdminBoard,\n    retrieveReviewers,\n    retrieveAllUsers,\n};\n\nexport default UserService","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport UserService from \"../services/user.service\";\n\nconst initialState = { reviewers: [], users: [] };\n\n\n\nexport const retrieveReviewers = createAsyncThunk(\n    \"users/reviewer\",\n    async () => {\n        const res = await UserService.retrieveReviewers();\n        return res.data;\n    }\n);\n\nexport const retrieveAllUsers = createAsyncThunk(\n    \"users/list\",\n    async () => {\n        const res = await UserService.retrieveAllUsers();\n        return res.data;\n\n    }\n);\n\nconst userSlice = createSlice({\n    name: \"client\",\n    initialState,\n    extraReducers: {\n        [retrieveReviewers.fulfilled]: (state, action) => {\n            state.reviewers = action.payload;\n        },\n        [retrieveAllUsers.fulfilled]: (state, action) => {\n            state.users = action.payload;\n        }\n    },\n});\n\nconst { reducer } = userSlice;\nexport default reducer;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport moment from 'moment';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { clearMessage } from \"../../slices/message\";\n\nexport const TaskForm = (props) => {\n    const clients = useSelector(state => state.client);\n    const { reviewers } = useSelector(state => state.user);\n    const [taskStatus, updateStatus] = useState(false);\n    const todaysDate = moment().format('YYYY-MM-DD');\n    const initialTaskState = {\n        description: \"\",\n        completed: false,\n        date: todaysDate,\n        clientId: \"\",\n        reviewerId: null,\n        minutesSpent: \"\",\n        taskType: \"\"\n    };\n    const [task, setTask] = useState(initialTaskState);\n    const [loading, setLoading] = useState(false);\n    const { message } = useSelector((state) => state.message);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n\n\n    const saveTask = (formValues) => {\n        const { description, minutesSpent, clientId, taskType } = formValues\n        setLoading(true)\n        props.saveTask({ ...task, description, minutesSpent, clientId, taskType }).then(() => {\n            setLoading(false);\n        })\n    }\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setTask({ ...task, [name]: value });\n    };\n\n    const handleStatus = (e, value) => {\n        e.preventDefault();\n        updateStatus(value);\n        setTask({ ...task, completed: value });\n    };\n\n    const validationSchema = Yup.object().shape({\n        clientId: Yup.string().required(\"This field is required!\"),\n        description: Yup.string().required(\"This field is required!\"),\n        minutesSpent: Yup.number().required(\"This field is required!\"),\n        taskType: Yup.string().required(\"This field is required!\"),\n    });\n    return (\n\n        <Formik\n            initialValues={initialTaskState}\n            validationSchema={validationSchema}\n            onSubmit={saveTask}\n        >\n            <Form>\n                <div>\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"clientId\">Choose client<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n\n                        <Field as=\"select\" className=\"form-control\" name=\"clientId\" id=\"clientId\">\n                            <option value=\"\">Select Client</option>\n                            {clients.map(e =>\n                                <option key={`client-${e.id}`} value={e.id}>{e.name}</option>\n                            )}\n                        </Field>\n                        <ErrorMessage\n                            name=\"clientId\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"taskDate\">Date<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <input className=\"form-control\" type=\"date\" value={task.date} id=\"taskDate\" name=\"date\" onChange={handleInputChange} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"taskType\">Choose task type<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n\n                        <Field as=\"select\" className=\"form-control\" name=\"taskType\" id=\"taskType\">\n                            <option value=\"\">Select Task Type</option>\n                            <option key='type-1' value=\"Income Tax\">Income Tax</option>\n                            <option key='type-2' value=\"GST\">GST</option>\n                            <option key='type-3' value=\"MCA\">MCA</option>\n                            <option key='type-4' value=\"FEMA\">FEMA</option>\n                            <option key='type-5' value=\"DGFT\">DGFT</option>\n                            <option key='type-6' value=\"Others\">Others</option>\n                        </Field>\n                        <ErrorMessage\n                            name=\"taskType\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <Field\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"description\"\n                            name=\"description\"\n                        />\n                        <ErrorMessage\n                            name=\"description\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"minutesSpent\">Time Spent<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <Field type=\"number\" className=\"form-control\" id=\"minutesSpent\"\n                            name=\"minutesSpent\" />\n\n                        <ErrorMessage\n                            name=\"minutesSpent\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Status<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <button\n                            className=\"btn btn-md btn-info mr-2\"\n                            onClick={(e) => handleStatus(e, !taskStatus)}\n                        >\n                            In-progress {!taskStatus && < input type=\"checkbox\" defaultChecked />}\n                        </button>\n                        <button\n                            className=\"btn btn-md mr-2 btn-primary\"\n                            onClick={(e) => handleStatus(e, !taskStatus)}\n                        >\n                            completed {taskStatus && < input type=\"checkbox\" defaultChecked />}\n                        </button>\n                    </div>\n                    {taskStatus && <div className=\"form-group\">\n                        <label htmlFor=\"reviewers\">Reviewer By: <small className=\"text-center text-muted\">\n                            (optional)</small>: </label>\n\n                        <select className=\"form-control\" onChange={handleInputChange} name=\"reviewerId\" id=\"reviewers\">\n                            <option value={null}>Select Reviewer</option>\n                            {reviewers.map(e =>\n                                <option key={`reviewer-${e.id}`} value={e.id}>{e.username}</option>\n                            )}\n                        </select>\n                    </div>}\n\n\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                            {loading && !message && (\n                                <span className=\"spinner-border spinner-border-sm\"></span>\n                            )}\n                            <span>Submit</span>\n                        </button>\n                    </div>\n                </div ></Form></Formik>)\n}","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { retrieveClients } from '../../slices/clients';\nimport { createTask } from \"../../slices/tasks\";\nimport { retrieveReviewers } from '../../slices/users';\n// import AddIcon from '@mui/icons-material/Add';\nimport { TaskForm } from \"./TaskForm\";\n\nconst AddTask = () => {\n    const [submitted, setSubmitted] = useState(false);\n    const [taskList, setTaskList] = useState([]);\n    const dispatch = useDispatch();\n\n    const saveTask = (task) => {\n        const { description, completed, date, minutesSpent, reviewerId, clientId, taskType } = task;\n        dispatch(createTask({ description, date, completed, minutesSpent, reviewerId, clientId, taskType }))\n            .unwrap()\n            .then(() => {\n                setTaskList([]);\n                setSubmitted(true);\n            })\n            .catch(e => {\n                console.log(\"🚀 ~ file: AddTask.js ~ line 34 ~ saveTask ~ e\", e.message)\n            });\n    };\n\n    const initFetch = useCallback(async () => {\n        dispatch(retrieveClients());\n        dispatch(retrieveReviewers());\n        setTaskList([<TaskForm key=\"task-1\" saveTask={saveTask} />]);\n    }, [dispatch])\n\n    useEffect(() => {\n        initFetch();\n    }, [initFetch])\n\n\n    const newTask = () => {\n        setTaskList([...taskList, <TaskForm key=\"task1\" saveTask={saveTask} />]);\n        setSubmitted(false);\n    };\n\n\n\n    return (\n        <div className=\"col-md-12 table-responsive-md\">\n            <h4>New Task</h4>\n            <hr></hr>\n            <div className=\"submit-form\" >\n                {submitted ? (\n                    <div>\n                        <h4>You submitted successfully!</h4>\n                        <button className=\"btn btn-success\" onClick={(clients, reviewers) => newTask()}>\n                            Add\n                        </button>\n                    </div>\n                ) :\n                    (<div className=\"row\">\n                        {/* <div >\n                        <button className=\"btn btn-success\" onClick={newTask}>\n                            Add <AddIcon />\n                        </button>\n                    </div> */}\n                        <div className=\"col-md-12\" style={{ display: 'flex', flexDirection: 'column' }} >\n                            {taskList.map(eachTask => eachTask)}\n                        </div>\n                    </div >)\n                }\n\n            </div >\n        </div>\n\n    );\n};\n\nexport default AddTask;","import React, { useEffect, useState } from \"react\";\nimport moment from 'moment';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TaskDataService from \"../../services/task.service\";\nimport { deleteTask, updateTask } from \"../../slices/tasks\";\n\nconst Task = (props) => {\n    const initialTaskState = {\n        id: null,\n        clientId: null,\n        date: null,\n        description: \"\",\n        minutesSpent: null,\n        completed: false,\n        reviewerId: null,\n        taskType: \"\"\n    };\n\n    const clients = useSelector(state => state.client);\n    const { reviewers } = useSelector(state => state.user);\n    const [currentTask, setCurrentTask] = useState(initialTaskState);\n    const [message, setMessage] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const getTask = id => {\n        TaskDataService.get(id)\n            .then(response => {\n                setCurrentTask(\n                    { ...response.data, ...(response.data?.taskType === undefined || null && { taskType: '' }) });\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    useEffect(() => {\n        getTask(props.match.params.id);\n    }, [props.match.params.id]);\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setCurrentTask({ ...currentTask, [name]: value });\n    };\n\n    const updateStatus = status => {\n\n        const data = {\n            id: currentTask.id,\n            clientId: currentTask.clientId,\n            reviewerId: currentTask.reviewerId,\n            description: currentTask.description,\n            completed: status,\n            minutesSpent: currentTask.minutesSpent,\n            date: currentTask.date,\n            taskType: currentTask.taskType,\n        };\n\n        dispatch(updateTask({ id: currentTask.id, data }))\n            .unwrap()\n            .then(response => {\n                console.log(response);\n                setCurrentTask({ ...currentTask, completed: status, ...(!status && { reviewerId: null }) });\n                setMessage(\"The status was updated successfully!\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const updateContent = () => {\n        dispatch(updateTask({ id: currentTask.id, data: currentTask }))\n            .unwrap()\n            .then(response => {\n                console.log(response);\n                setMessage(\"The task was updated successfully!\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const removeTask = () => {\n        dispatch(deleteTask({ id: currentTask.id }))\n            .unwrap()\n            .then(() => {\n                props.history.push(\"/tasks\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    return (\n        <div className=\"col-md-12 table-responsive-md\">\n            <h4>Edit Task</h4>\n            <hr></hr>\n            {currentTask ? (\n                < div className=\"edit-form\">\n\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"client\">Choose client:</label>\n\n                            <select className=\"form-control\" onChange={handleInputChange} name=\"clientId\" id=\"clients\">\n                                <option value=\"\">Select Client</option>\n                                {clients.map(e =>\n                                    <option key={`client-${e.id}`} selected={currentTask.clientId === e.id} value={e.id}>{e.name}</option>\n                                )}\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"taskDate\">Date:</label>\n                            <input className=\"form-control\" type=\"date\" value={moment(currentTask.date).format(('YYYY-MM-DD'))} id=\"taskDate\" name=\"date\" onChange={handleInputChange} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"taskType\">Choose task type<sup className=\"text-center text-danger\">\n                                *</sup>:</label>\n\n                            <select className=\"form-control\" onChange={handleInputChange} name=\"taskType\" id=\"taskType\">\n                                <option selected={currentTask.taskType === \"\"} value=\"\">Select Task Type</option>\n                                <option selected={currentTask.taskType === \"Income Tax\"} key='type-1' value=\"Income Tax\">Income Tax</option>\n                                <option selected={currentTask.taskType === \"GST\"} key='type-2' value=\"GST\">GST</option>\n                                <option selected={currentTask.taskType === \"MCA\"} key='type-3' value=\"MCA\">MCA</option>\n                                <option selected={currentTask.taskType === \"FEMA\"} key='type-4' value=\"FEMA\">FEMA</option>\n                                <option selected={currentTask.taskType === \"DGFT\"} key='type-5' value=\"DGFT\">DGFT</option>\n                                <option selected={currentTask.taskType === \"Others\"} key='type-6' value=\"Others\">Others</option>\n                            </select>\n\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"description\">Description</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"description\"\n                                name=\"description\"\n                                value={currentTask.description}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"minutesSpent\">Time Spent:</label>\n                            <input\n                                type=\"number\"\n                                className=\"form-control\"\n                                id=\"minutesSpent\"\n                                required\n                                value={currentTask.minutesSpent || ''}\n                                onChange={handleInputChange}\n                                name=\"minutesSpent\"\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>\n                                <strong>Status:</strong>\n                            </label>\n                            {currentTask.completed ? \"Completed\" : \"In-progress\"}\n                        </div>\n                        {currentTask.completed && <div className=\"form-group\">\n                            <label htmlFor=\"reviewers\">Reviewer:</label>\n\n                            <select className=\"form-control\" onChange={handleInputChange} name=\"reviewerId\" id=\"reviewers\">\n                                <option value={null}>Select Reviewer</option>\n                                {reviewers.map(e =>\n                                    <option selected={currentTask.reviewerId === e.id} key={`reviewer-${e.id}`} value={e.id}>{e.username}</option>\n                                )}\n                            </select>\n                        </div>}\n                    </form>\n\n                    {currentTask.completed ? (\n                        <button\n                            className=\"btn btn-md btn-primary mr-2\"\n                            onClick={() => updateStatus(false)}\n                        >\n                            In-Progress\n                        </button>\n                    ) : (\n                        <button\n                            className=\"btn btn-md btn-info mr-2\"\n                            onClick={() => updateStatus(true)}\n                        >\n                            Completed\n                        </button>\n                    )}\n\n                    <button className=\"btn btn-md btn-danger mr-2\" onClick={removeTask}>\n                        Delete\n                    </button>\n\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-md mr-2 btn-success\"\n                        onClick={updateContent}\n                    >\n                        Update\n                    </button>\n                    <p>{message}</p>\n                </div>\n            ) : (\n                <div>\n                    <br />\n                    <p>Please click on a Task to view...</p>\n                </div>\n            )\n            }\n        </div >\n    );\n};\n\nexport default Task;","import moment from 'moment';\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { retrieveClients } from '../../slices/clients';\nimport {\n    deleteAllTasks, deleteTask, findTasksByTitle, retrieveTasks\n} from \"../../slices/tasks\";\nimport { retrieveReviewers, retrieveAllUsers } from '../../slices/users';\n\n\nconst TasksList = () => {\n    const [searchTitle, setSearchTitle] = useState(\"\");\n    const tasks = useSelector(state => state.tasks);\n    const clients = useSelector(state => state.client);\n    const { reviewers, users } = useSelector(state => state.user);\n    const dispatch = useDispatch();\n    const { user: currentUser } = useSelector((state) => state.auth);\n    const [showUserCol, setShowUserCol] = useState(false);\n\n    const onChangeSearchTitle = e => {\n        const searchTitle = e.target.value;\n        setSearchTitle(searchTitle);\n    };\n\n    const initFetch = useCallback(() => {\n        dispatch(retrieveClients());\n        dispatch(retrieveReviewers());\n        dispatch(retrieveAllUsers());\n        dispatch(retrieveTasks());\n    }, [dispatch])\n\n    useEffect(() => {\n        if (currentUser && currentUser.roles.includes(\"ROLE_ADMIN\")) {\n            setShowUserCol(true);\n        } else {\n            setShowUserCol(false);\n        }\n    }, [currentUser]);\n\n    useEffect(() => {\n        initFetch()\n    }, [initFetch])\n\n    const removeTask = (id) => {\n        if (!window.confirm(\"Are you sure you want to delete the task ?\")) {\n            return\n        }\n        dispatch(deleteTask({ id }))\n            .unwrap()\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const removeAllTasks = () => {\n        if (!window.confirm(\"Are you sure you want to delete all tasks ?\")) {\n            return\n        }\n        dispatch(deleteAllTasks())\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const findByTitle = () => {\n        dispatch(findTasksByTitle({ description: searchTitle }));\n    };\n\n    const onSearchSubmit = e => {\n        if (e.code === 'Enter') {\n            findByTitle();\n        }\n    };\n\n    return (\n        <div className=\" row\">\n            <div className=\"col-md-12\">\n                <div className=\"input-group mb-3\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search by description\"\n                        value={searchTitle}\n                        onChange={onChangeSearchTitle}\n                        onKeyPress={onSearchSubmit}\n                    />\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type=\"button\"\n                            onClick={findByTitle}\n                        >\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-12 table-responsive-md\">\n                <h4>Task List</h4>\n                {tasks &&\n                    <table className=\"table table-striped\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">\n                                    #\n                                </th>\n                                {showUserCol && <th scope=\"col\">\n                                    User\n                                </th>}\n                                <th scope=\"col\">\n                                    Client\n                                </th>\n                                <th scope=\"col\">\n                                    Type\n                                </th>\n                                <th scope=\"col\">\n                                    Desc\n                                </th>\n                                <th scope=\"col\">\n                                    Date\n                                </th>\n                                <th scope=\"col\">\n                                    Time Spent\n                                </th>\n                                <th scope=\"col\">\n                                    Status\n                                </th>\n                                <th scope=\"col\">\n                                    Reviewer\n                                </th>\n                                <th scope=\"col\" colSpan=\"2\">\n                                    Actions\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody >\n                            {tasks.map((task, index) => {\n                                let clientName = \"\";\n                                clients.map(client => {\n                                    if (client.id === task.clientId) {\n                                        clientName = client.name;\n                                    }\n                                    return true\n                                });\n                                let reviewerName = \"\";\n                                let userName = \"\";\n                                reviewers.map(reviewer => {\n                                    if (reviewer.id === task.reviewerId) {\n                                        reviewerName = reviewer.username;\n                                    }\n                                    return true\n                                });\n\n                                showUserCol && users.map(user => {\n                                    if (user.id === task.userId) {\n                                        userName = user.username;\n                                    }\n                                    return true\n                                })\n\n                                return (\n                                    <tr key={`task-row-${index}`} className={\n                                        (task.completed ? \"table-success\" : \"table-warning\")\n                                    }>\n                                        <td>\n                                            {index + 1}\n                                        </td>\n                                        {showUserCol && <td>\n                                            {userName}\n                                        </td>}\n                                        <td>\n                                            {clientName}\n                                        </td>\n                                        <td>\n                                            {task?.taskType ? task.taskType : ''}\n                                        </td>\n                                        <td>\n                                            {task.description}\n                                        </td>\n                                        <td>\n                                            {moment(task.date).format('DD/MM/yyyy')}\n                                        </td>\n                                        <td>\n                                            {task.minutesSpent} mins\n                                        </td>\n                                        <td>\n                                            {task.completed ? \"Completed\" : \"In-Progress\"}\n                                        </td>\n                                        <td>\n                                            {reviewerName}\n                                        </td>\n                                        <td colSpan=\"2\">\n                                            <div style={{ display: 'inline-flex' }}>\n                                                <Link\n                                                    to={\"/tasks/\" + task.id}\n                                                    className=\"btn btn-sm btn-warning mr-2 mt-0\"\n                                                >\n                                                    Edit\n                                                </Link>\n                                                <button className=\"btn btn-sm btn-danger mr-2 mt-0\" onClick={() => removeTask(task.id)}>\n                                                    Delete\n                                                </button>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n\n                }\n            </div >\n            <div className=\"col-md-12 table-responsive-md\">\n                {\n                    tasks.length === 0 ?\n\n                        <div className=\"d-flex justify-content-center\">\n                            <h5 className=\"text-center text-info\">\n                                No Records Found\n                            </h5>\n                        </div>\n                        :\n                        <div className=\"d-flex justify-content-end\">\n                            <button\n                                className=\"m-3 btn btn-sm btn-danger\"\n                                onClick={removeAllTasks}\n                            >\n                                Remove All\n                            </button>\n                        </div>\n\n                }\n            </div >\n        </div>\n    );\n};\n\nexport default TasksList;","const eventBus = {\n    on(event, callback) {\n        document.addEventListener(event, (e) => callback(e.detail));\n    },\n    dispatch(event, data) {\n        document.dispatchEvent(new CustomEvent(event, { detail: data }));\n    },\n    remove(event, callback) {\n        document.removeEventListener(event, callback);\n    },\n};\n\nexport default eventBus;","import React, { useEffect, useState } from \"react\";\nimport EventBus from \"../common/EventBus\";\nimport UserService from \"../services/user.service\";\n\n\nconst BoardAdmin = () => {\n    const [content, setContent] = useState(\"\");\n\n    useEffect(() => {\n        UserService.getAdminBoard().then(\n            (response) => {\n                setContent(response.data);\n            },\n            (error) => {\n                const _content =\n                    (error.response &&\n                        error.response.data &&\n                        error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n\n                setContent(_content);\n                if (error.response && error.response.status === 401) {\n                    EventBus.dispatch(\"logout\");\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{content}</h3>\n            </header>\n        </div>\n    );\n};\n\nexport default BoardAdmin;\n","import React, { useEffect, useState } from \"react\";\nimport EventBus from \"../common/EventBus\";\nimport UserService from \"../services/user.service\";\n\nconst BoardModerator = () => {\n    const [content, setContent] = useState(\"\");\n\n    useEffect(() => {\n        UserService.getModeratorBoard().then(\n            (response) => {\n                setContent(response.data);\n            },\n            (error) => {\n                const _content =\n                    (error.response &&\n                        error.response.data &&\n                        error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n\n                setContent(_content);\n                if (error.response && error.response.status === 401) {\n                    EventBus.dispatch(\"logout\");\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{content}</h3>\n            </header>\n        </div>\n    );\n};\n\nexport default BoardModerator;\n","import React from \"react\";\n// import UserService from \"../services/user.service\";\n\n\nconst Home = () => {\n    // const [content, setContent] = useState(\"\");\n\n    // useEffect(() => {\n    //     UserService.getPublicContent().then(\n    //         (response) => {\n    //             setContent(response.data);\n    //         },\n    //         (error) => {\n    //             const _content =\n    //                 (error.response && error.response.data) ||\n    //                 error.message ||\n    //                 error.toString();\n\n    //             setContent(_content);\n    //         }\n    //     );\n    // }, []);\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-sm-12\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Thought for the Day!</h5>\n                        <p className=\"card-text\">Failures are the stepping stones for <span style={{ color: \"green\" }}>success</span></p>\n                        <button href=\"#\" className=\"btn btn-primary\">Have a nice day</button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-sm-12\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Action Items for December</h5>\n                        <p className=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import http from \"../http-common\";\n\nconst register = (username, email, password) => {\n    return http.post(\"auth/signup\", {\n        username,\n        email,\n        password,\n    });\n};\n\nconst login = (username, password) => {\n    return http\n        .post(\"auth/signin\", {\n            username,\n            password,\n        })\n        .then((response) => {\n            if (response.data.accessToken) {\n                localStorage.setItem(\"user\", JSON.stringify(response.data));\n            }\n\n            return response.data;\n        });\n};\n\nconst logout = () => {\n    localStorage.removeItem(\"user\");\n};\n\n\nconst authService = {\n    register,\n    login,\n    logout,\n};\n\nexport default authService;","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setMessage } from \"./message\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst user = JSON.parse(localStorage.getItem(\"user\"));\n\nexport const register = createAsyncThunk(\n    \"auth/register\",\n    async ({ username, email, password }, thunkAPI) => {\n        try {\n            const response = await AuthService.register(username, email, password);\n            thunkAPI.dispatch(setMessage(response.data.message));\n            return response.data;\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const login = createAsyncThunk(\n    \"auth/login\",\n    async ({ username, password }, thunkAPI) => {\n        try {\n            const data = await AuthService.login(username, password);\n            return { user: data };\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const logout = createAsyncThunk(\"auth/logout\", () => {\n    AuthService.logout();\n});\n\n\nconst initialState = user\n    ? { isLoggedIn: true, user }\n    : { isLoggedIn: false, user: null };\n\nconst authSlice = createSlice({\n    name: \"auth\",\n    initialState,\n    extraReducers: {\n        [register.fulfilled]: (state, action) => {\n            state.isLoggedIn = false;\n        },\n        [register.rejected]: (state, action) => {\n            state.isLoggedIn = false;\n        },\n        [login.fulfilled]: (state, action) => {\n            state.isLoggedIn = true;\n            state.user = action.payload.user;\n        },\n        [login.rejected]: (state, action) => {\n            state.isLoggedIn = false;\n            state.user = null;\n        },\n        [logout.fulfilled]: (state, action) => {\n            state.isLoggedIn = false;\n            state.user = null;\n        },\n    },\n});\n\nconst { reducer } = authSlice;\nexport default reducer;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { login } from \"../slices/auth\";\nimport { clearMessage } from \"../slices/message\";\n\nconst Login = (props) => {\n    const [loading, setLoading] = useState(false);\n\n    const { isLoggedIn } = useSelector((state) => state.auth);\n    const { message } = useSelector((state) => state.message);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n    const initialValues = {\n        username: \"\",\n        password: \"\",\n    };\n\n    const validationSchema = Yup.object().shape({\n        username: Yup.string().required(\"This field is required!\"),\n        password: Yup.string().required(\"This field is required!\"),\n    });\n\n    const handleLogin = (formValue) => {\n        const { username, password } = formValue;\n        setLoading(true);\n\n        dispatch(login({ username, password }))\n            .unwrap()\n            .then(() => {\n                props.history.push(\"/profile\");\n                window.location.reload();\n            })\n            .catch(() => {\n                setLoading(false);\n            });\n    };\n\n    if (isLoggedIn) {\n        return <Redirect to=\"/profile\" />;\n    }\n\n    return (\n        <div className=\"col-md-12 login-form\">\n            <div className=\"card card-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={handleLogin}\n                >\n                    <Form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username</label>\n                            <Field name=\"username\" type=\"text\" className=\"form-control\" />\n                            <ErrorMessage\n                                name=\"username\"\n                                component=\"div\"\n                                className=\"alert alert-danger\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <Field name=\"password\" type=\"password\" className=\"form-control\" />\n                            <ErrorMessage\n                                name=\"password\"\n                                component=\"div\"\n                                className=\"alert alert-danger\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled={loading}>\n                                {loading && (\n                                    <span className=\"spinner-border spinner-border-sm\"></span>\n                                )}\n                                <span>Login</span>\n                            </button>\n                        </div>\n                    </Form>\n                </Formik>\n            </div>\n\n            {message && (\n                <div className=\"form-group\">\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        {message}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\n\nconst Profile = () => {\n    const { user: currentUser } = useSelector((state) => state.auth);\n\n    if (!currentUser) {\n        return <Redirect to=\"/login\" />;\n    }\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>\n                    <strong>{currentUser.username}</strong> Profile\n                </h3>\n            </header>\n            {/* <p>\n                <strong>Token:</strong> {currentUser.accessToken.substring(0, 20)} ...{\" \"}\n                {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\n            </p> */}\n            {/* <p>\n                <strong>Id:</strong> {currentUser.id}\n            </p> */}\n            <p>\n                <strong>Email:</strong> {currentUser.email}\n            </p>\n            <strong>Authorities:</strong>\n            <ul>\n                {currentUser.roles &&\n                    currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\n            </ul>\n        </div>\n    );\n};\n\nexport default Profile;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { register } from \"../slices/auth\";\nimport { clearMessage } from \"../slices/message\";\n\nconst Register = () => {\n    const [successful, setSuccessful] = useState(false);\n\n    const { message } = useSelector((state) => state.message);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n    const initialValues = {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n    };\n\n    const validationSchema = Yup.object().shape({\n        username: Yup.string()\n            .test(\n                \"len\",\n                \"The username must be between 3 and 20 characters.\",\n                (val) =>\n                    val &&\n                    val.toString().length >= 3 &&\n                    val.toString().length <= 20\n            )\n            .required(\"This field is required!\"),\n        email: Yup.string()\n            .email(\"This is not a valid email.\")\n            .required(\"This field is required!\"),\n        password: Yup.string()\n            .test(\n                \"len\",\n                \"The password must be between 6 and 40 characters.\",\n                (val) =>\n                    val &&\n                    val.toString().length >= 6 &&\n                    val.toString().length <= 40\n            )\n            .required(\"This field is required!\"),\n    });\n\n    const handleRegister = (formValue) => {\n        const { username, email, password } = formValue;\n\n        setSuccessful(false);\n\n        dispatch(register({ username, email, password }))\n            .unwrap()\n            .then(() => {\n                setSuccessful(true);\n            })\n            .catch(() => {\n                setSuccessful(false);\n            });\n    };\n\n    return (\n        <div className=\"col-md-12 table-responsive-md\">\n            <h4>Add Staff</h4>\n            <hr></hr>\n            <div className=\"col-md-12 signup-form\">\n\n\n                <div className=\"card card-container\">\n                    <img\n                        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                        alt=\"profile-img\"\n                        className=\"profile-img-card\"\n                    />\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={handleRegister}\n                    >\n                        <Form>\n                            {!successful && (\n                                <div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"username\">Username</label>\n                                        <Field name=\"username\" type=\"text\" className=\"form-control\" />\n                                        <ErrorMessage\n                                            name=\"username\"\n                                            component=\"div\"\n                                            className=\"alert alert-danger\"\n                                        />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"email\">Email</label>\n                                        <Field name=\"email\" type=\"email\" className=\"form-control\" />\n                                        <ErrorMessage\n                                            name=\"email\"\n                                            component=\"div\"\n                                            className=\"alert alert-danger\"\n                                        />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"password\">Set Password</label>\n                                        <Field\n                                            name=\"password\"\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                        />\n                                        <ErrorMessage\n                                            name=\"password\"\n                                            component=\"div\"\n                                            className=\"alert alert-danger\"\n                                        />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <button type=\"submit\" className=\"btn btn-primary btn-block\">Create</button>\n                                    </div>\n                                </div>\n                            )}\n                        </Form>\n                    </Formik>\n                </div>\n\n                {message && (\n                    <div className=\"form-group\">\n                        <div\n                            className={successful ? \"alert alert-success\" : \"alert alert-danger\"}\n                            role=\"alert\"\n                        >\n                            {message}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Register;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport {\n    deleteAllClients, deleteClient, findClientByName, retrieveClients\n} from \"../../slices/clients\";\n\nconst ClientList = () => {\n    const [searchName, setSearchName] = useState(\"\");\n    const clients = useSelector(state => state.client);\n    const dispatch = useDispatch();\n\n    const onChangeSearchName = e => {\n        const searchName = e.target.value;\n        setSearchName(searchName);\n    };\n\n    const onSearchSubmit = e => {\n        if (e.code === 'Enter') {\n            findByName();\n        }\n    };\n\n    const initFetch = useCallback(() => {\n\n        dispatch(retrieveClients());\n    }, [dispatch])\n\n    useEffect(() => {\n        initFetch()\n    }, [initFetch])\n\n    const removeClient = (id) => {\n        if (!window.confirm(\"Are you sure you want to delete the client ?\")) {\n            return\n        }\n        dispatch(deleteClient({ id }))\n            .unwrap()\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const removeAllClients = () => {\n        if (!window.confirm(\"Are you sure you want to delete all clients ?\")) {\n            return\n        }\n        dispatch(deleteAllClients())\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const findByName = () => {\n        dispatch(findClientByName({ name: searchName }));\n    };\n\n    return (\n        <div className=\" row\">\n            <div className=\"col-md-12\">\n                <div className=\"input-group mb-3\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search by description\"\n                        value={searchName}\n                        onChange={onChangeSearchName}\n                        onKeyPress={onSearchSubmit}\n                    />\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type=\"button\"\n                            onClick={findByName}\n                        >\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </div>\n            {/* client list table start */}\n            <div className=\"col-md-2 table-responsive-md\"></div>\n            <div className=\"col-md-8 table-responsive-md\">\n                <h4>Client List</h4>\n                {clients &&\n                    <table className=\"table table-striped\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">\n                                    #\n                                </th>\n                                <th scope=\"col\">\n                                    Client\n                                </th>\n                                <th scope=\"col\" colSpan=\"2\">\n                                    Actions\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody >\n                            {clients.map((client, index) => {\n                                return (\n                                    <tr key={`client-row-${index}`} >\n                                        <td>\n                                            {index + 1}\n                                        </td>\n                                        <td>\n                                            {client.name}\n                                        </td>\n\n                                        <td colSpan=\"2\">\n                                            <div style={{ display: 'inline-flex' }}>\n                                                <Link\n                                                    to={\"/clients/\" + client.id}\n                                                    className=\"btn btn-sm btn-warning mr-2 mt-0\"\n                                                >\n                                                    Edit\n                                                </Link>\n                                                <button className=\"btn btn-sm btn-danger mr-2 mt-0\" onClick={() => removeClient(client.id)}>\n                                                    Delete\n                                                </button>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n\n                }\n\n\n\n            </div>\n            <div className=\"col-md-2 table-responsive-md\"></div>\n            {/* client list table end */}\n            <div className=\"col-md-10\">\n\n\n                {\n                    clients.length === 0 ?\n\n                        <div className=\"d-flex justify-content-center\">\n                            <h5 className=\"text-center text-info\">\n                                No Records Found\n                            </h5>\n                        </div>\n                        :\n                        <div className=\"d-flex justify-content-end\">\n                            <button\n                                className=\"m-3 btn btn-sm btn-danger\"\n                                onClick={removeAllClients}\n                            >\n                                Remove All\n                            </button>\n                        </div>\n\n                }\n            </div>\n        </div >\n    );\n};\n\nexport default ClientList;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { clearMessage } from \"../../slices/message\";\n\nexport const ClientForm = (props) => {\n    const initialClientState = {\n        name: \"\",\n    };\n    const [loading, setLoading] = useState(false);\n    const { message } = useSelector((state) => state.message);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n    const saveClient = (formValues) => {\n        const { name } = formValues\n        setLoading(true)\n        props.saveClient({ name }).then(() => {\n            setLoading(false);\n        })\n    }\n\n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required(\"This field is required!\"),\n    });\n    return (\n\n        <Formik\n            initialValues={initialClientState}\n            validationSchema={validationSchema}\n            onSubmit={saveClient}\n        >\n            <Form>\n                <div>\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Name<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <Field\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"name\"\n                            name=\"name\"\n                        />\n                        <ErrorMessage\n                            name=\"name\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                            {loading && !message && (\n                                <span className=\"spinner-border spinner-border-sm\"></span>\n                            )}\n                            <span>Submit</span>\n                        </button>\n                    </div>\n                </div ></Form></Formik>)\n}","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { createClient } from \"../../slices/clients\";\n// import AddIcon from '@mui/icons-material/Add';\nimport { ClientForm } from \"./ClientForm\";\n\nconst AddClient = () => {\n    const [submitted, setSubmitted] = useState(false);\n    const [clientList, setClientList] = useState([]);\n    const dispatch = useDispatch();\n\n    const saveClient = (client) => {\n        const { name } = client;\n        dispatch(createClient({ name }))\n            .unwrap()\n            .then(() => {\n                setClientList([]);\n                setSubmitted(true);\n            })\n            .catch(e => {\n                console.log(\"🚀 ~ file: AddClient.js ~ line 34 ~ saveClient ~ e\", e.message)\n            });\n    };\n\n    const initFetch = useCallback(async () => {\n        setClientList([<ClientForm key=\"client-1\" saveClient={saveClient} />]);\n    }, [dispatch])\n\n    useEffect(() => {\n        initFetch();\n    }, [initFetch])\n\n\n    const newClient = () => {\n        setClientList([...clientList, <ClientForm key=\"client-1\" saveClient={saveClient} />]);\n        setSubmitted(false);\n    };\n\n\n\n    return (\n        <div className=\"col-md-12 table-responsive-md\">\n            <h4>Add New Client</h4>\n            <hr></hr>\n            <div className=\"submit-form\" >\n                {submitted ? (\n                    <div>\n                        <h4>You submitted successfully!</h4>\n                        <button className=\"btn btn-success\" onClick={() => newClient()}>\n                            Add\n                        </button>\n                    </div>\n                ) :\n                    (<div className=\"row\">\n                        {/* <div >\n                        <button className=\"btn btn-success\" onClick={newClient}>\n                            Add <AddIcon />\n                        </button>\n                    </div> */}\n                        <div className=\"col-md-12\" style={{ display: 'flex', flexDirection: 'column' }} >\n                            {clientList.map(eachClient => eachClient)}\n                        </div>\n                    </div >)\n                }\n\n            </div >\n        </div>\n    );\n};\n\nexport default AddClient;","import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport ClientService from \"../../services/client.service\";\nimport { updateClient } from \"../../slices/clients\";\n\nconst Client = (props) => {\n    const initialClientState = {\n        id: null,\n        name: \"\",\n\n    };\n    const [currentClient, setCurrentClient] = useState(initialClientState);\n    const [message, setMessage] = useState(\"\");\n    const dispatch = useDispatch();\n\n    const getClient = id => {\n        ClientService.get(id)\n            .then(response => {\n                setCurrentClient(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    useEffect(() => {\n        getClient(props.match.params.id);\n    }, [props.match.params.id]);\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setCurrentClient({ ...currentClient, [name]: value });\n    };\n\n    const updateContent = () => {\n        dispatch(updateClient({ id: currentClient.id, data: currentClient }))\n            .unwrap()\n            .then(response => {\n                console.log(response);\n                setMessage(\"The Client was updated successfully!\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    return (\n        <div className=\"col-md-12 table-responsive-md\">\n            <h4>Edit Client</h4>\n            <hr></hr>\n\n            {currentClient && (\n                <div className=\"edit-form\">\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"name\">Name</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"name\"\n                                name=\"name\"\n                                value={currentClient.name}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                    </form>\n\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-md mr-2 btn-success\"\n                        onClick={updateContent}\n                    >\n                        Update\n                    </button>\n                    <button className=\"btn btn-md btn-primary mr-2\" onClick={() => props.history.push('/clientList')}>\n                        {`< Go Back`}\n                    </button>\n                    <p>{message}</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Client;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport AddTask from \"components/Tasks/AddTask\";\nimport Task from \"components/Tasks/Task\";\nimport TasksList from \"components/Tasks/TasksList\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport EventBus from \"./common/EventBus\";\nimport BoardAdmin from \"./components/BoardAdmin\";\nimport BoardModerator from \"./components/BoardModerator\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Profile from \"./components/Profile\";\nimport Register from \"./components/Register\";\nimport { history } from \"./helpers/history\";\nimport { logout } from \"./slices/auth\";\nimport { clearMessage } from \"./slices/message\";\nimport AuthVerify from \"./common/AuthVerify\";\nimport ClientList from 'components/clients/ClientList';\nimport AddClient from \"components/clients/AddClient\";\nimport Client from 'components/clients/Client';\nimport { capitalize } from 'lodash';\n\nconst App = () => {\n  // const [showModeratorBoard, setShowModeratorBoard] = useState(false);\n  const [showAdminBoard, setShowAdminBoard] = useState(false);\n\n  const { user: currentUser } = useSelector((state) => state.auth);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    history.listen((location) => {\n      dispatch(clearMessage()); // clear message when changing location\n    });\n  }, [dispatch]);\n\n  const logOut = useCallback(() => {\n    dispatch(logout());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (currentUser) {\n      // setShowModeratorBoard(currentUser.roles.includes(\"ROLE_MODERATOR\"));\n      setShowAdminBoard(currentUser.roles.includes(\"ROLE_ADMIN\"));\n    } else {\n      // setShowModeratorBoard(false);\n      setShowAdminBoard(false);\n    }\n\n    EventBus.on(\"logout\", () => {\n      logOut();\n    });\n\n    return () => {\n      EventBus.remove(\"logout\");\n    };\n  }, [currentUser, logOut]);\n\n  return (\n    <Router history={history}>\n      <div>\n        <nav className=\"navbar navbar-expand-lg bg-dark navbar-dark\">\n          <div className=\"container-fluid\">\n            <Link to={\"/\"} className=\"navbar-brand\">\n              KRMN & Associates\n            </Link>\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n\n                {currentUser && (<React.Fragment>\n                  <li className=\"nav-item dropdown\">\n                    <div className=\"nav-link dropdown-toggle\" id=\"navbarDropdown1\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                      Tasks\n                    </div>\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown1\">\n                      <li><Link to={\"/taskList\"} className=\"dropdown-item\" href=\"#\">Task List</Link></li>\n                      <li><Link to={\"/addTask\"} className=\"dropdown-item\" href=\"#\">Add Task</Link></li>\n                    </ul>\n                  </li>\n\n                  {showAdminBoard && <React.Fragment>\n                    <li className=\"nav-item dropdown\">\n                      <div className=\"nav-link dropdown-toggle\" id=\"navbarDropdown2\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                        Clients\n                      </div>\n                      <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown2\">\n                        <li><Link to={\"/clientList\"} className=\"dropdown-item\" href=\"#\">Client List</Link></li>\n                        <li><Link to={\"/addClient\"} className=\"dropdown-item\" href=\"#\">Add Client</Link></li>\n                      </ul>\n                    </li>\n                    <li className=\"nav-item dropdown\">\n                      <div className=\"nav-link dropdown-toggle\" id=\"navbarDropdown2\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                        Staff\n                      </div>\n                      <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown2\">\n                        <li><Link to={\"/register\"} className=\"dropdown-item\" href=\"#\">Add Staff</Link></li>\n                      </ul>\n                    </li>\n                  </React.Fragment>\n                  }\n                </React.Fragment>\n                )}\n              </ul>\n              <ul className=\"navbar-nav mr\">\n                {currentUser ? (\n                  <React.Fragment>\n                    <li className=\"nav-item dropdown\">\n                      <div className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown2\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                        Hello {capitalize(currentUser.username)}\n                      </div>\n                      <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown2\">\n                        <li><Link to={\"/profile\"} className=\"dropdown-item\" href=\"#\">\n                          Profile</Link></li>\n                        <li><a href=\"/login\" className=\"dropdown-item\" onClick={logOut}>\n                          LogOut\n                        </a></li>\n                      </ul>\n                    </li>\n\n                  </React.Fragment>\n                ) : (\n                  <React.Fragment>\n                    <li className=\"nav-item\">\n                      <Link to={\"/login\"} className=\"nav-link\">\n                        Login\n                      </Link>\n                    </li>\n                  </React.Fragment>\n                )}\n\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/home\"]} component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route path=\"/taskList\" component={TasksList} />\n            <Route path=\"/addTask\" component={AddTask} />\n            <Route path=\"/mod\" component={BoardModerator} />\n            <Route path=\"/admin\" component={BoardAdmin} />\n            <Route path=\"/tasks/:id\" component={Task} />\n            <Route path=\"/clientList\" component={ClientList} />\n            <Route path=\"/addClient\" component={AddClient} />\n            <Route path=\"/clients/:id\" component={Client} />\n          </Switch>\n        </div>\n        <AuthVerify logOut={logOut} />\n      </div >\n    </Router >\n  );\n};\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from \"./slices/auth\";\nimport messageReducer from \"./slices/message\";\nimport tasksReducer from './slices/tasks';\nimport userReducer from './slices/users';\nimport clientReducer from './slices/clients';\n\nconst reducer = {\n    auth: authReducer,\n    message: messageReducer,\n    tasks: tasksReducer,\n    user: userReducer,\n    client: clientReducer,\n}\n\nconst store = configureStore({\n    reducer: reducer,\n    devTools: true,\n})\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport { HashRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter basename=\"/#\">\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();"],"sourceRoot":""}