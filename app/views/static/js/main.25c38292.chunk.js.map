{"version":3,"sources":["http-common.js","services/auth-header.js","services/task.service.js","slices/message.js","slices/tasks.js","components/Task.js","common/EventBus.js","services/client.service.js","slices/clients.js","services/user.service.js","slices/users.js","components/TaskForm.js","components/AddTask.js","components/BoardAdmin.js","components/BoardModerator.js","components/Home.js","services/auth.service.js","slices/auth.js","components/Login.js","components/Profile.js","components/Register.js","components/TasksList.js","helpers/history.js","App.js","store.js","index.js"],"names":["axios","create","baseURL","headers","authHeader","user","JSON","parse","localStorage","getItem","accessToken","Authorization","TaskService","getAll","http","get","id","data","post","update","put","remove","delete","removeAll","findByDesc","desc","getCurrentUserTasks","messageSlice","createSlice","name","initialState","reducers","setMessage","state","action","message","payload","clearMessage","reducer","actions","createTask","createAsyncThunk","thunkAPI","a","description","minutesSpent","date","completed","clientId","reviewerId","res","response","toString","dispatch","rejectWithValue","retrieveTasks","retrieveCurrentUserTasks","updateTask","deleteTask","deleteAllTasks","findTasksByTitle","extraReducers","fulfilled","push","index","findIndex","Task","splice","props","clients","useSelector","client","reviewers","useState","currentTask","setCurrentTask","useDispatch","useEffect","match","params","TaskDataService","then","catch","e","console","log","handleInputChange","event","target","value","updateStatus","status","unwrap","className","htmlFor","onChange","map","selected","type","moment","format","required","username","onClick","history","eventBus","on","callback","document","addEventListener","detail","dispatchEvent","CustomEvent","removeEventListener","ClientService","retrieveClients","UserService","getPublicContent","getUserBoard","getModeratorBoard","getAdminBoard","retrieveReviewers","TaskForm","taskStatus","initialTaskState","task","setTask","loading","setLoading","handleStatus","preventDefault","validationSchema","Yup","shape","initialValues","onSubmit","formValues","saveTask","role","as","component","defaultChecked","AddTask","submitted","setSubmitted","taskList","setTaskList","initFetch","useCallback","style","display","flexDirection","eachTask","BoardAdmin","content","setContent","error","_content","EventBus","BoardModerator","Home","color","href","authService","register","email","password","login","setItem","stringify","logout","removeItem","AuthService","isLoggedIn","rejected","Login","auth","to","src","alt","formValue","window","location","reload","disabled","Profile","currentUser","substring","substr","length","roles","Register","successful","setSuccessful","test","val","TasksList","searchTitle","setSearchTitle","tasks","placeholder","colSpan","clientName","reviewerName","reviewer","confirm","createBrowserHistory","App","showModeratorBoard","setShowModeratorBoard","showAdminBoard","setShowAdminBoard","listen","logOut","includes","exact","path","authReducer","messageReducer","tasksReducer","userReducer","clientReducer","store","configureStore","devTools","ReactDOM","render","basename","getElementById"],"mappings":"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","file":"static/js/main.25c38292.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: '/api',\n    headers: {\n        \"Content-type\": \"application/json\"\n    }\n});","export default function authHeader() {\n    const user = JSON.parse(localStorage.getItem('user'));\n\n    if (user && user.accessToken) {\n        return { Authorization: 'Bearer ' + user.accessToken };\n    } else {\n        return {};\n    }\n}","import http from \"../http-common\";\nimport authHeader from \"./auth-header\";\nconst getAll = () => {\n    return http.get(\"/tasks\", { headers: authHeader() });\n};\n\nconst getCurrentUserTasks = () => {\n    return http.get(\"/user/tasks\", { headers: authHeader() });\n};\n\nconst get = id => {\n    return http.get(`/tasks/${id}`, { headers: authHeader() });\n};\n\nconst create = data => {\n    return http.post(\"/tasks\", data, { headers: authHeader() });\n};\n\nconst update = (id, data) => {\n    return http.put(`/tasks/${id}`, data, { headers: authHeader() });\n};\n\nconst remove = id => {\n    return http.delete(`/tasks/${id}`, { headers: authHeader() });\n};\n\nconst removeAll = () => {\n    return http.delete(`/tasks`, { headers: authHeader() });\n};\n\nconst findByDesc = desc => {\n    return http.get(`/tasks?description=${desc}`, { headers: authHeader() });\n};\n\nconst TaskService = {\n    getAll,\n    get,\n    create,\n    update,\n    remove,\n    removeAll,\n    findByDesc,\n    getCurrentUserTasks\n};\n\nexport default TaskService;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {};\n\nconst messageSlice = createSlice({\n    name: \"message\",\n    initialState,\n    reducers: {\n        setMessage: (state, action) => {\n            return { message: action.payload };\n        },\n        clearMessage: () => {\n            return { message: \"\" };\n        },\n    },\n});\n\n\nconst { reducer, actions } = messageSlice;\n\nexport const { setMessage, clearMessage } = actions\nexport default reducer;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setMessage } from \"./message\";\nimport TaskService from \"../services/task.service\";\n\nconst initialState = [];\n\nexport const createTask = createAsyncThunk(\n    \"task/create\",\n    async ({ description, minutesSpent, date, completed, clientId, reviewerId }, thunkAPI) => {\n        try {\n            const res = await TaskService.create({ description, minutesSpent, date, completed, clientId, reviewerId });\n            return res.data;\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const retrieveTasks = createAsyncThunk(\n    \"Tasks/retrieve\",\n    async () => {\n        const res = await TaskService.getAll();\n        return res.data;\n    }\n);\n\nexport const retrieveCurrentUserTasks = createAsyncThunk(\n    \"currentUsertasks/retrieve\",\n    async () => {\n        const res = await TaskService.getAll();\n        return res.data;\n    }\n);\n\nexport const updateTask = createAsyncThunk(\n    \"Tasks/update\",\n    async ({ id, data }) => {\n        const res = await TaskService.update(id, data);\n        return res.data;\n    }\n);\n\nexport const deleteTask = createAsyncThunk(\n    \"Tasks/delete\",\n    async ({ id }) => {\n        await TaskService.remove(id);\n        return { id };\n    }\n);\n\nexport const deleteAllTasks = createAsyncThunk(\n    \"Tasks/deleteAll\",\n    async () => {\n        const res = await TaskService.removeAll();\n        return res.data;\n    }\n);\n\nexport const findTasksByTitle = createAsyncThunk(\n    \"Tasks/findByTitle\",\n    async ({ description }) => {\n        const res = await TaskService.findByDesc(description);\n        return res.data;\n    }\n);\n\nconst TaskSlice = createSlice({\n    name: \"Task\",\n    initialState,\n    extraReducers: {\n        [createTask.fulfilled]: (state, action) => {\n            state.push(action.payload);\n        },\n        [retrieveTasks.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n        [retrieveCurrentUserTasks.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n        [updateTask.fulfilled]: (state, action) => {\n            const index = state.findIndex(Task => Task.id === action.payload.id);\n            state[index] = {\n                ...state[index],\n                ...action.payload,\n            };\n        },\n        [deleteTask.fulfilled]: (state, action) => {\n            let index = state.findIndex(({ id }) => id === action.payload.id);\n            state.splice(index, 1);\n        },\n        [deleteAllTasks.fulfilled]: (state, action) => {\n            return [];\n        },\n        [findTasksByTitle.fulfilled]: (state, action) => {\n            return [...action.payload];\n        },\n    },\n});\n\nconst { reducer } = TaskSlice;\nexport default reducer;","import React, { useEffect, useState } from \"react\";\nimport moment from 'moment';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TaskDataService from \"../services/task.service\";\nimport { deleteTask, updateTask } from \"../slices/tasks\";\n\nconst Task = (props) => {\n    const initialTaskState = {\n        id: null,\n        clientId: null,\n        date: null,\n        description: \"\",\n        minutesSpent: null,\n        completed: false,\n        reviewerId: null\n    };\n\n    const clients = useSelector(state => state.client);\n    const reviewers = useSelector(state => state.user);\n    const [currentTask, setCurrentTask] = useState(initialTaskState);\n    const [message, setMessage] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const getTask = id => {\n        TaskDataService.get(id)\n            .then(response => {\n                setCurrentTask(response.data);\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    useEffect(() => {\n        getTask(props.match.params.id);\n    }, [props.match.params.id]);\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setCurrentTask({ ...currentTask, [name]: value });\n    };\n\n    const updateStatus = status => {\n        const data = {\n            id: currentTask.id,\n            clientId: currentTask.clientId,\n            reviewerId: currentTask.reviewerId,\n            description: currentTask.description,\n            completed: status,\n            minutesSpent: currentTask.minutesSpent,\n            date: currentTask.date\n        };\n\n        dispatch(updateTask({ id: currentTask.id, data }))\n            .unwrap()\n            .then(response => {\n                console.log(response);\n                setCurrentTask({ ...currentTask, completed: status, ...(!status && { reviewerId: null }) });\n                setMessage(\"The status was updated successfully!\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const updateContent = () => {\n        dispatch(updateTask({ id: currentTask.id, data: currentTask }))\n            .unwrap()\n            .then(response => {\n                console.log(response);\n                setMessage(\"The task was updated successfully!\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const removeTask = () => {\n        dispatch(deleteTask({ id: currentTask.id }))\n            .unwrap()\n            .then(() => {\n                props.history.push(\"/tasks\");\n            })\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    return (\n        <div>\n            {currentTask ? (\n                <div className=\"edit-form\">\n                    <h4>Task</h4>\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"client\">Choose client:</label>\n\n                            <select className=\"form-control\" onChange={handleInputChange} name=\"clientId\" id=\"clients\">\n                                <option value=\"\">Select Client</option>\n                                {clients.map(e =>\n                                    <option key={`client-${e.id}`} selected={currentTask.clientId === e.id} value={e.id}>{e.name}</option>\n                                )}\n                            </select>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"taskDate\">Date:</label>\n                            <input className=\"form-control\" type=\"date\" value={moment(currentTask.date).format(('YYYY-MM-DD'))} id=\"taskDate\" name=\"date\" onChange={handleInputChange} />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"description\">Description</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"description\"\n                                name=\"description\"\n                                value={currentTask.description}\n                                onChange={handleInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"minutesSpent\">Time Spent:</label>\n                            <input\n                                type=\"number\"\n                                className=\"form-control\"\n                                id=\"minutesSpent\"\n                                required\n                                value={currentTask.minutesSpent || ''}\n                                onChange={handleInputChange}\n                                name=\"minutesSpent\"\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>\n                                <strong>Status:</strong>\n                            </label>\n                            {currentTask.completed ? \"Completed\" : \"In-progress\"}\n                        </div>\n                        {currentTask.completed && <div className=\"form-group\">\n                            <label htmlFor=\"reviewers\">Reviewer:</label>\n\n                            <select className=\"form-control\" onChange={handleInputChange} name=\"reviewerId\" id=\"reviewers\">\n                                <option value={null}>Select Reviewer</option>\n                                {reviewers.map(e =>\n                                    <option selected={currentTask.reviewerId === e.id} key={`reviewer-${e.id}`} value={e.id}>{e.username}</option>\n                                )}\n                            </select>\n                        </div>}\n                    </form>\n\n                    {currentTask.completed ? (\n                        <button\n                            className=\"btn btn-md btn-primary mr-2\"\n                            onClick={() => updateStatus(false)}\n                        >\n                            In-Progress\n                        </button>\n                    ) : (\n                        <button\n                            className=\"btn btn-md btn-info mr-2\"\n                            onClick={() => updateStatus(true)}\n                        >\n                            Completed\n                        </button>\n                    )}\n\n                    <button className=\"btn btn-md btn-danger mr-2\" onClick={removeTask}>\n                        Delete\n                    </button>\n\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-md mr-2 btn-success\"\n                        onClick={updateContent}\n                    >\n                        Update\n                    </button>\n                    <p>{message}</p>\n                </div>\n            ) : (\n                <div>\n                    <br />\n                    <p>Please click on a Task to view...</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Task;","const eventBus = {\n    on(event, callback) {\n        document.addEventListener(event, (e) => callback(e.detail));\n    },\n    dispatch(event, data) {\n        document.dispatchEvent(new CustomEvent(event, { detail: data }));\n    },\n    remove(event, callback) {\n        document.removeEventListener(event, callback);\n    },\n};\n\nexport default eventBus;","import http from \"../http-common\";\n\nconst getAll = () => {\n    return http.get(\"/clients\");\n};\n\nconst ClientService = {\n    getAll,\n};\n\nexport default ClientService;","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport ClientService from \"../services/client.service\";\n\nconst initialState = [];\n\n\n\nexport const retrieveClients = createAsyncThunk(\n    \"clients/retrieve\",\n    async () => {\n        const res = await ClientService.getAll();\n        return res.data;\n    }\n);\n\n\nconst clientSlice = createSlice({\n    name: \"client\",\n    initialState,\n    extraReducers: {\n\n        [retrieveClients.fulfilled]: (state, action) => {\n            return [...action.payload];\n        }\n    },\n});\n\nconst { reducer } = clientSlice;\nexport default reducer;","import http from \"../http-common\";\nimport authHeader from \"./auth-header\";\n\n\nconst getPublicContent = () => {\n    return http.get(\"/all\");\n};\n\nconst getUserBoard = () => {\n    return http.get(\"/user\", { headers: authHeader() });\n};\n\nconst getModeratorBoard = () => {\n    return http.get(\"/mod\", { headers: authHeader() });\n};\n\nconst getAdminBoard = () => {\n    return http.get(\"/admin\", { headers: authHeader() });\n};\n\nconst retrieveReviewers = () => {\n    return http.get(\"/reviewer\");\n};\n\nconst UserService = {\n    getPublicContent,\n    getUserBoard,\n    getModeratorBoard,\n    getAdminBoard,\n    retrieveReviewers,\n};\n\nexport default UserService","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport UserService from \"../services/user.service\";\n\nconst initialState = [];\n\n\n\nexport const retrieveReviewers = createAsyncThunk(\n    \"users/reviewer\",\n    async () => {\n        const res = await UserService.retrieveReviewers();\n        return res.data;\n    }\n);\n\nconst userSlice = createSlice({\n    name: \"client\",\n    initialState,\n    extraReducers: {\n        [retrieveReviewers.fulfilled]: (state, action) => {\n            return [...action.payload];\n        }\n    },\n});\n\nconst { reducer } = userSlice;\nexport default reducer;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport moment from 'moment';\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { clearMessage } from \"../slices/message\";\n\nexport const TaskForm = (props) => {\n    const clients = useSelector(state => state.client);\n    const reviewers = useSelector(state => state.user);\n    const [taskStatus, updateStatus] = useState(false);\n    const todaysDate = moment().format('YYYY-MM-DD');\n    const initialTaskState = {\n        description: \"\",\n        completed: false,\n        date: todaysDate,\n        clientId: \"\",\n        reviewerId: null,\n        minutesSpent: \"\",\n    };\n    const [task, setTask] = useState(initialTaskState);\n    const [loading, setLoading] = useState(false);\n    const { message } = useSelector((state) => state.message);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n\n\n    const saveTask = (formValues) => {\n        const { description, minutesSpent, clientId } = formValues\n        setLoading(true)\n        props.saveTask({ ...task, description, minutesSpent, clientId }).then(() => {\n            setLoading(false);\n        })\n    }\n\n    const handleInputChange = event => {\n        const { name, value } = event.target;\n        setTask({ ...task, [name]: value });\n    };\n\n    const handleStatus = (e, value) => {\n        e.preventDefault();\n        updateStatus(value);\n        setTask({ ...task, completed: value });\n    };\n\n    const validationSchema = Yup.object().shape({\n        clientId: Yup.string().required(\"This field is required!\"),\n        description: Yup.string().required(\"This field is required!\"),\n        minutesSpent: Yup.number().required(\"This field is required!\"),\n    });\n    return (\n\n        <Formik\n            initialValues={initialTaskState}\n            validationSchema={validationSchema}\n            onSubmit={saveTask}\n        >\n            <Form>\n                <div>\n                    {message && (\n                        <div className=\"form-group\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                {message}\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"client\">Choose client<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n\n                        <Field as=\"select\" className=\"form-control\" name=\"clientId\" id=\"clientId\">\n                            <option value=\"\">Select Client</option>\n                            {clients.map(e =>\n                                <option key={`client-${e.id}`} value={e.id}>{e.name}</option>\n                            )}\n                        </Field>\n                        <ErrorMessage\n                            name=\"description\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"taskDate\">Date<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <input className=\"form-control\" type=\"date\" value={task.date} id=\"taskDate\" name=\"date\" onChange={handleInputChange} />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <Field\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"description\"\n                            name=\"description\"\n                        />\n                        <ErrorMessage\n                            name=\"description\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"minutesSpent\">Time Spent<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <Field type=\"number\" className=\"form-control\" id=\"minutesSpent\"\n                            name=\"minutesSpent\" />\n\n                        <ErrorMessage\n                            name=\"minutesSpent\"\n                            component=\"div\"\n                            className=\"alert alert-danger\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Status<sup className=\"text-center text-danger\">\n                            *</sup>:</label>\n                        <button\n                            className=\"btn btn-md btn-info mr-2\"\n                            onClick={(e) => handleStatus(e, !taskStatus)}\n                        >\n                            In-progress {!taskStatus && < input type=\"checkbox\" defaultChecked />}\n                        </button>\n                        <button\n                            className=\"btn btn-md mr-2 btn-primary\"\n                            onClick={(e) => handleStatus(e, !taskStatus)}\n                        >\n                            completed {taskStatus && < input type=\"checkbox\" defaultChecked />}\n                        </button>\n                    </div>\n                    {taskStatus && <div className=\"form-group\">\n                        <label htmlFor=\"reviewers\">Reviewer By: <small className=\"text-center text-muted\">\n                            (optional)</small>: </label>\n\n                        <select className=\"form-control\" onChange={handleInputChange} name=\"reviewerId\" id=\"reviewers\">\n                            <option value={null}>Select Reviewer</option>\n                            {reviewers.map(e =>\n                                <option key={`reviewer-${e.id}`} value={e.id}>{e.username}</option>\n                            )}\n                        </select>\n                    </div>}\n\n\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-primary btn-block\">\n                            {loading && !message && (\n                                <span className=\"spinner-border spinner-border-sm\"></span>\n                            )}\n                            <span>Submit</span>\n                        </button>\n                    </div>\n                </div ></Form></Formik>)\n}","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { retrieveClients } from '../slices/clients';\nimport { createTask } from \"../slices/tasks\";\nimport { retrieveReviewers } from '../slices/users';\n// import AddIcon from '@mui/icons-material/Add';\nimport { TaskForm } from \"./TaskForm\";\n\nconst AddTask = () => {\n    const [submitted, setSubmitted] = useState(false);\n    const [taskList, setTaskList] = useState([]);\n    const dispatch = useDispatch();\n\n    const saveTask = (task) => {\n        const { description, completed, date, minutesSpent, reviewerId, clientId } = task;\n        dispatch(createTask({ description, date, completed, minutesSpent, reviewerId, clientId }))\n            .unwrap()\n            .then(() => {\n                setTaskList([]);\n                setSubmitted(true);\n            })\n            .catch(e => {\n                console.log(\"🚀 ~ file: AddTask.js ~ line 34 ~ saveTask ~ e\", e.message)\n            });\n    };\n\n    const initFetch = useCallback(async () => {\n        dispatch(retrieveClients());\n        dispatch(retrieveReviewers());\n        setTaskList([<TaskForm key=\"task-1\" saveTask={saveTask} />]);\n    }, [dispatch])\n\n    useEffect(() => {\n        initFetch();\n    }, [initFetch])\n\n\n    const newTask = () => {\n        setTaskList([...taskList, <TaskForm key=\"task1\" saveTask={saveTask} />]);\n        setSubmitted(false);\n    };\n\n\n\n    return (\n        <div className=\"submit-form\" >\n            {submitted ? (\n                <div>\n                    <h4>You submitted successfully!</h4>\n                    <button className=\"btn btn-success\" onClick={(clients, reviewers) => newTask()}>\n                        Add\n                    </button>\n                </div>\n            ) :\n                (<div className=\"row\">\n                    {/* <div >\n                        <button className=\"btn btn-success\" onClick={newTask}>\n                            Add <AddIcon />\n                        </button>\n                    </div> */}\n                    <div className=\"col-md-12\" style={{ display: 'flex', flexDirection: 'column' }} >\n                        {taskList.map(eachTask => eachTask)}\n                    </div>\n                </div >)\n            }\n\n        </div >\n\n    );\n};\n\nexport default AddTask;","import React, { useEffect, useState } from \"react\";\nimport EventBus from \"../common/EventBus\";\nimport UserService from \"../services/user.service\";\n\n\nconst BoardAdmin = () => {\n    const [content, setContent] = useState(\"\");\n\n    useEffect(() => {\n        UserService.getAdminBoard().then(\n            (response) => {\n                setContent(response.data);\n            },\n            (error) => {\n                const _content =\n                    (error.response &&\n                        error.response.data &&\n                        error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n\n                setContent(_content);\n                if (error.response && error.response.status === 401) {\n                    EventBus.dispatch(\"logout\");\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{content}</h3>\n            </header>\n        </div>\n    );\n};\n\nexport default BoardAdmin;\n","import React, { useEffect, useState } from \"react\";\nimport EventBus from \"../common/EventBus\";\nimport UserService from \"../services/user.service\";\n\nconst BoardModerator = () => {\n    const [content, setContent] = useState(\"\");\n\n    useEffect(() => {\n        UserService.getModeratorBoard().then(\n            (response) => {\n                setContent(response.data);\n            },\n            (error) => {\n                const _content =\n                    (error.response &&\n                        error.response.data &&\n                        error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n\n                setContent(_content);\n                if (error.response && error.response.status === 401) {\n                    EventBus.dispatch(\"logout\");\n                }\n            }\n        );\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>{content}</h3>\n            </header>\n        </div>\n    );\n};\n\nexport default BoardModerator;\n","import React from \"react\";\n// import UserService from \"../services/user.service\";\n\n\nconst Home = () => {\n    // const [content, setContent] = useState(\"\");\n\n    // useEffect(() => {\n    //     UserService.getPublicContent().then(\n    //         (response) => {\n    //             setContent(response.data);\n    //         },\n    //         (error) => {\n    //             const _content =\n    //                 (error.response && error.response.data) ||\n    //                 error.message ||\n    //                 error.toString();\n\n    //             setContent(_content);\n    //         }\n    //     );\n    // }, []);\n\n    return (\n        <div className=\"row\">\n            <div className=\"col-sm-12\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Thought for the Day!</h5>\n                        <p className=\"card-text\">Failures are the stepping stones for <span style={{ color: \"green\" }}>success</span></p>\n                        <button href=\"#\" className=\"btn btn-primary\">Have a nice day</button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-sm-12\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Action Items for December</h5>\n                        <p className=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import http from \"../http-common\";\n\nconst register = (username, email, password) => {\n    return http.post(\"auth/signup\", {\n        username,\n        email,\n        password,\n    });\n};\n\nconst login = (username, password) => {\n    return http\n        .post(\"auth/signin\", {\n            username,\n            password,\n        })\n        .then((response) => {\n            if (response.data.accessToken) {\n                localStorage.setItem(\"user\", JSON.stringify(response.data));\n            }\n\n            return response.data;\n        });\n};\n\nconst logout = () => {\n    localStorage.removeItem(\"user\");\n};\n\n\nconst authService = {\n    register,\n    login,\n    logout,\n};\n\nexport default authService;","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setMessage } from \"./message\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst user = JSON.parse(localStorage.getItem(\"user\"));\n\nexport const register = createAsyncThunk(\n    \"auth/register\",\n    async ({ username, email, password }, thunkAPI) => {\n        try {\n            const response = await AuthService.register(username, email, password);\n            thunkAPI.dispatch(setMessage(response.data.message));\n            return response.data;\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const login = createAsyncThunk(\n    \"auth/login\",\n    async ({ username, password }, thunkAPI) => {\n        try {\n            const data = await AuthService.login(username, password);\n            return { user: data };\n        } catch (error) {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const logout = createAsyncThunk(\"auth/logout\", () => {\n    AuthService.logout();\n});\n\n\nconst initialState = user\n    ? { isLoggedIn: true, user }\n    : { isLoggedIn: false, user: null };\n\nconst authSlice = createSlice({\n    name: \"auth\",\n    initialState,\n    extraReducers: {\n        [register.fulfilled]: (state, action) => {\n            state.isLoggedIn = false;\n        },\n        [register.rejected]: (state, action) => {\n            state.isLoggedIn = false;\n        },\n        [login.fulfilled]: (state, action) => {\n            state.isLoggedIn = true;\n            state.user = action.payload.user;\n        },\n        [login.rejected]: (state, action) => {\n            state.isLoggedIn = false;\n            state.user = null;\n        },\n        [logout.fulfilled]: (state, action) => {\n            state.isLoggedIn = false;\n            state.user = null;\n        },\n    },\n});\n\nconst { reducer } = authSlice;\nexport default reducer;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { login } from \"../slices/auth\";\nimport { clearMessage } from \"../slices/message\";\n\nconst Login = (props) => {\n    const [loading, setLoading] = useState(false);\n\n    const { isLoggedIn } = useSelector((state) => state.auth);\n    const { message } = useSelector((state) => state.message);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n    const initialValues = {\n        username: \"\",\n        password: \"\",\n    };\n\n    const validationSchema = Yup.object().shape({\n        username: Yup.string().required(\"This field is required!\"),\n        password: Yup.string().required(\"This field is required!\"),\n    });\n\n    const handleLogin = (formValue) => {\n        const { username, password } = formValue;\n        setLoading(true);\n\n        dispatch(login({ username, password }))\n            .unwrap()\n            .then(() => {\n                props.history.push(\"/profile\");\n                window.location.reload();\n            })\n            .catch(() => {\n                setLoading(false);\n            });\n    };\n\n    if (isLoggedIn) {\n        return <Redirect to=\"/profile\" />;\n    }\n\n    return (\n        <div className=\"col-md-12 login-form\">\n            <div className=\"card card-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={handleLogin}\n                >\n                    <Form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"username\">Username</label>\n                            <Field name=\"username\" type=\"text\" className=\"form-control\" />\n                            <ErrorMessage\n                                name=\"username\"\n                                component=\"div\"\n                                className=\"alert alert-danger\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <Field name=\"password\" type=\"password\" className=\"form-control\" />\n                            <ErrorMessage\n                                name=\"password\"\n                                component=\"div\"\n                                className=\"alert alert-danger\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <button type=\"submit\" className=\"btn btn-primary btn-block\" disabled={loading}>\n                                {loading && (\n                                    <span className=\"spinner-border spinner-border-sm\"></span>\n                                )}\n                                <span>Login</span>\n                            </button>\n                        </div>\n                    </Form>\n                </Formik>\n            </div>\n\n            {message && (\n                <div className=\"form-group\">\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        {message}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from 'react-router-dom';\n\nconst Profile = () => {\n    const { user: currentUser } = useSelector((state) => state.auth);\n\n    if (!currentUser) {\n        return <Redirect to=\"/login\" />;\n    }\n\n    return (\n        <div className=\"container\">\n            <header className=\"jumbotron\">\n                <h3>\n                    <strong>{currentUser.username}</strong> Profile\n                </h3>\n            </header>\n            <p>\n                <strong>Token:</strong> {currentUser.accessToken.substring(0, 20)} ...{\" \"}\n                {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\n            </p>\n            <p>\n                <strong>Id:</strong> {currentUser.id}\n            </p>\n            <p>\n                <strong>Email:</strong> {currentUser.email}\n            </p>\n            <strong>Authorities:</strong>\n            <ul>\n                {currentUser.roles &&\n                    currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\n            </ul>\n        </div>\n    );\n};\n\nexport default Profile;","import { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport { register } from \"../slices/auth\";\nimport { clearMessage } from \"../slices/message\";\n\nconst Register = () => {\n    const [successful, setSuccessful] = useState(false);\n\n    const { message } = useSelector((state) => state.message);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(clearMessage());\n    }, [dispatch]);\n\n    const initialValues = {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n    };\n\n    const validationSchema = Yup.object().shape({\n        username: Yup.string()\n            .test(\n                \"len\",\n                \"The username must be between 3 and 20 characters.\",\n                (val) =>\n                    val &&\n                    val.toString().length >= 3 &&\n                    val.toString().length <= 20\n            )\n            .required(\"This field is required!\"),\n        email: Yup.string()\n            .email(\"This is not a valid email.\")\n            .required(\"This field is required!\"),\n        password: Yup.string()\n            .test(\n                \"len\",\n                \"The password must be between 6 and 40 characters.\",\n                (val) =>\n                    val &&\n                    val.toString().length >= 6 &&\n                    val.toString().length <= 40\n            )\n            .required(\"This field is required!\"),\n    });\n\n    const handleRegister = (formValue) => {\n        const { username, email, password } = formValue;\n\n        setSuccessful(false);\n\n        dispatch(register({ username, email, password }))\n            .unwrap()\n            .then(() => {\n                setSuccessful(true);\n            })\n            .catch(() => {\n                setSuccessful(false);\n            });\n    };\n\n    return (\n        <div className=\"col-md-12 signup-form\">\n            <div className=\"card card-container\">\n                <img\n                    src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                    alt=\"profile-img\"\n                    className=\"profile-img-card\"\n                />\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={handleRegister}\n                >\n                    <Form>\n                        {!successful && (\n                            <div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"username\">Username</label>\n                                    <Field name=\"username\" type=\"text\" className=\"form-control\" />\n                                    <ErrorMessage\n                                        name=\"username\"\n                                        component=\"div\"\n                                        className=\"alert alert-danger\"\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email</label>\n                                    <Field name=\"email\" type=\"email\" className=\"form-control\" />\n                                    <ErrorMessage\n                                        name=\"email\"\n                                        component=\"div\"\n                                        className=\"alert alert-danger\"\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\">Set Password</label>\n                                    <Field\n                                        name=\"password\"\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                    />\n                                    <ErrorMessage\n                                        name=\"password\"\n                                        component=\"div\"\n                                        className=\"alert alert-danger\"\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <button type=\"submit\" className=\"btn btn-primary btn-block\">Create</button>\n                                </div>\n                            </div>\n                        )}\n                    </Form>\n                </Formik>\n            </div>\n\n            {message && (\n                <div className=\"form-group\">\n                    <div\n                        className={successful ? \"alert alert-success\" : \"alert alert-danger\"}\n                        role=\"alert\"\n                    >\n                        {message}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default Register;\n","import moment from 'moment';\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { retrieveClients } from '../slices/clients';\nimport {\n    deleteAllTasks, deleteTask, findTasksByTitle, retrieveTasks\n} from \"../slices/tasks\";\nimport { retrieveReviewers } from '../slices/users';\n\n\nconst TasksList = () => {\n    const [searchTitle, setSearchTitle] = useState(\"\");\n    const tasks = useSelector(state => state.tasks);\n    const clients = useSelector(state => state.client);\n    const reviewers = useSelector(state => state.user);\n    const dispatch = useDispatch();\n\n    const onChangeSearchTitle = e => {\n        const searchTitle = e.target.value;\n        setSearchTitle(searchTitle);\n    };\n\n    const initFetch = useCallback(() => {\n        if (!clients.length) {\n            dispatch(retrieveClients());\n        }\n        if (!reviewers.length) {\n            dispatch(retrieveReviewers());\n        }\n        dispatch(retrieveTasks());\n    }, [dispatch])\n\n    useEffect(() => {\n        initFetch()\n    }, [initFetch])\n\n    const removeTask = (id) => {\n        if (!window.confirm(\"Are you sure you want to delete the task ?\")) {\n            return\n        }\n        dispatch(deleteTask({ id }))\n            .unwrap()\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const removeAllTasks = () => {\n        if (!window.confirm(\"Are you sure you want to delete all tasks ?\")) {\n            return\n        }\n        dispatch(deleteAllTasks())\n            .catch(e => {\n                console.log(e);\n            });\n    };\n\n    const findByTitle = () => {\n        dispatch(findTasksByTitle({ description: searchTitle }));\n    };\n\n    return (\n        <div className=\" row\">\n            <div className=\"col-md-12\">\n                <div className=\"input-group mb-3\">\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Search by description\"\n                        value={searchTitle}\n                        onChange={onChangeSearchTitle}\n                    />\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type=\"button\"\n                            onClick={findByTitle}\n                        >\n                            Search\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-12\">\n                <h4>Task List</h4>\n                {tasks &&\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>\n                                    #\n                                </th>\n                                <th>\n                                    Client\n                                </th>\n                                <th>\n                                    Desc\n                                </th>\n                                <th>\n                                    Date\n                                </th>\n                                <th>\n                                    Time Spent\n                                </th>\n                                <th>\n                                    Status\n                                </th>\n                                <th>\n                                    Reviewer\n                                </th>\n                                <th colSpan=\"2\">\n                                    Actions\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody >\n                            {tasks.map((task, index) => {\n                                let clientName = \"\";\n                                clients.map(client => {\n                                    if (client.id === task.clientId) {\n                                        clientName = client.name;\n                                    }\n                                    return true\n                                });\n                                let reviewerName = \"\";\n                                reviewers.map(reviewer => {\n                                    if (reviewer.id === task.reviewerId) {\n                                        reviewerName = reviewer.username;\n                                    }\n                                    return true\n                                });\n                                return (\n                                    <tr key={`task-row-${index}`} className={\n                                        (task.completed ? \"table-success\" : \"table-warning\")\n                                    }>\n                                        <td>\n                                            {index + 1}\n                                        </td>\n                                        <td>\n                                            {clientName}\n                                        </td>\n                                        <td>\n                                            {task.description.substr(0, 10)}\n                                        </td>\n                                        <td>\n                                            {moment(task.date).format('DD/MM/yyyy')}\n                                        </td>\n                                        <td>\n                                            {task.minutesSpent} mins\n                                        </td>\n                                        <td>\n                                            {task.completed ? \"Completed\" : \"In-Progress\"}\n                                        </td>\n                                        <td>\n                                            {reviewerName}\n                                        </td>\n                                        <td style={{ display: 'inline-flex' }}>\n                                            <Link\n                                                to={\"/tasks/\" + task.id}\n                                                className=\"btn btn-sm btn-warning mr-2 mt-0\"\n                                            >\n                                                Edit\n                                            </Link>\n                                            <button className=\"btn btn-sm btn-danger mr-2 mt-0\" onClick={() => removeTask(task.id)}>\n                                                Delete\n                                            </button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    </table>\n\n                }\n                {tasks.length === 0 ?\n\n\n                    <h5 className=\"text-center text-info\">\n                        No Records Found\n                    </h5>\n                    :\n                    <button\n                        className=\"m-3 btn btn-sm btn-danger\"\n                        onClick={removeAllTasks}\n                    >\n                        Remove All\n                    </button>\n\n                }\n            </div>\n        </div >\n    );\n};\n\nexport default TasksList;","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport Task from \"components/Task\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport EventBus from \"./common/EventBus\";\nimport AddTask from './components/AddTask';\nimport BoardAdmin from \"./components/BoardAdmin\";\nimport BoardModerator from \"./components/BoardModerator\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\nimport Profile from \"./components/Profile\";\nimport Register from \"./components/Register\";\nimport TasksList from \"./components/TasksList\";\nimport { history } from \"./helpers/history\";\nimport { logout } from \"./slices/auth\";\nimport { clearMessage } from \"./slices/message\";\n// import AuthVerify from \"./common/AuthVerify\";\n\nconst App = () => {\n  const [showModeratorBoard, setShowModeratorBoard] = useState(false);\n  const [showAdminBoard, setShowAdminBoard] = useState(false);\n\n  const { user: currentUser } = useSelector((state) => state.auth);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    history.listen((location) => {\n      dispatch(clearMessage()); // clear message when changing location\n    });\n  }, [dispatch]);\n\n  const logOut = useCallback(() => {\n    dispatch(logout());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (currentUser) {\n      setShowModeratorBoard(currentUser.roles.includes(\"ROLE_MODERATOR\"));\n      setShowAdminBoard(currentUser.roles.includes(\"ROLE_ADMIN\"));\n    } else {\n      setShowModeratorBoard(false);\n      setShowAdminBoard(false);\n    }\n\n    EventBus.on(\"logout\", () => {\n      logOut();\n    });\n\n    return () => {\n      EventBus.remove(\"logout\");\n    };\n  }, [currentUser, logOut]);\n\n  return (\n    <Router history={history}>\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/\"} className=\"navbar-brand\">\n            KRMN & Associates\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/home\"} className=\"nav-link\">\n                Home\n              </Link>\n            </li>\n\n            {showModeratorBoard && (\n              <li className=\"nav-item\">\n                <Link to={\"/mod\"} className=\"nav-link\">\n                  Moderator Board\n                </Link>\n              </li>\n            )}\n\n            {showAdminBoard && (\n              <li className=\"nav-item\">\n                <Link to={\"/admin\"} className=\"nav-link\">\n                  Admin Board\n                </Link>\n              </li>\n            )}\n\n            {currentUser && (\n              <div className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <Link to={\"/taskList\"} className=\"nav-link\">\n                    Task List\n                  </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <Link to={\"/addTask\"} className=\"nav-link\">\n                    Add Task\n                  </Link>\n                </li>\n                {showAdminBoard && <li className=\"nav-item\">\n                  <Link to={\"/register\"} className=\"nav-link\">\n                    Add Staff Member\n                  </Link>\n                </li>}\n              </div>\n            )}\n          </div>\n\n          {currentUser ? (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/profile\"} className=\"nav-link\">\n                  {currentUser.username}\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <a href=\"/login\" className=\"nav-link\" onClick={logOut}>\n                  LogOut\n                </a>\n              </li>\n            </div>\n          ) : (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/login\"} className=\"nav-link\">\n                  Login\n                </Link>\n              </li>\n            </div>\n          )}\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/home\"]} component={Home} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/profile\" component={Profile} />\n            <Route path=\"/taskList\" component={TasksList} />\n            <Route path=\"/addTask\" component={AddTask} />\n            <Route path=\"/mod\" component={BoardModerator} />\n            <Route path=\"/admin\" component={BoardAdmin} />\n            <Route path=\"/tasks/:id\" component={Task} />\n          </Switch>\n        </div>\n        {/* <AuthVerify logOut={logOut}/> */}\n      </div>\n    </Router>\n  );\n};\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from \"./slices/auth\";\nimport messageReducer from \"./slices/message\";\nimport tasksReducer from './slices/tasks';\nimport userReducer from './slices/users';\nimport clientReducer from './slices/clients';\n\nconst reducer = {\n    auth: authReducer,\n    message: messageReducer,\n    tasks: tasksReducer,\n    user: userReducer,\n    client: clientReducer,\n}\n\nconst store = configureStore({\n    reducer: reducer,\n    devTools: true,\n})\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport { HashRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter basename=\"/#\">\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}